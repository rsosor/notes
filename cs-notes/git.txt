			index(暫存/stage)		a list of files		a list of files of the remote
		   add		　　　commit			push
working directory	   →	staging area	→	local repository	→	remote repository
	|	↖			　　	／	↖		／	 |
	|	　¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯		　¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯		 |
	|		　　　checkout			　　  clone/fetch		 |
	|________________________________________________________________________________|
					pull
工作目錄			.git 文件夾(暫存區)		.git 文件夾(repo/資料庫/編輯環境/本地版本庫)
Working tree means the directory that contains the .git folder, including all sub directories and files.



Header: <type>(<scope>): <subject>
 - type: 代表 commit 的類別：feat, fix, docs, style, refactor, test, chore，必要欄位。
 - scope 代表 commit 影響的範圍，例如資料庫、控制層、模板層等等，視專案不同而不同，為可選欄位。
 - subject 代表此 commit 的簡短描述，不要超過 50 個字元，結尾不要加句號，為必要欄位。

Body: 72-character wrapped. This should answer:
 * Body 部份是對本次 Commit 的詳細描述，可以分成多行，每一行不要超過 72 個字元。
 * 說明程式碼變動的項目與原因，還有與先前行為的對比。

Footer: 
 - 填寫任務編號（如果有的話）.
 - BREAKING CHANGE（可忽略），記錄不兼容的變動，
   以 BREAKING CHANGE: 開頭，後面是對變動的描述、以及變動原因和遷移方法。
#+ISSUE ID   若 Git 線上平台未與工單系統整合可先以 當天日期+流水號

type: subject 是簡述不要超過 50 個字元

type 只允許使用以下類別：
．feat	新增/修改功能 (feature)。
．fix	修補 bug (bug fix)。
．docs	文件 (documentation)。
．style	格式 (不影響程式碼運行的變動 white-space, formatting, missing semi colons, etc)。
．refactor	重構 (既不是新增功能，也不是修補 bug 的程式碼變動)。
．perf	改善效能 (A code change that improves performance)。
．test	增加測試 (when adding missing tests)。
．chore	建構程序或輔助工具的變動 (maintain)。
．revert	撤銷回覆先前的 commit 例如：revert: type(scope): subject (回覆版本：xxxx)。

．init	初始化
．add
．fix	業務對 修改程式
．adjust	業務改 程式對而改
．review	通常任務分支上、review 整理就包括移除而不是用 del
．del	通常任務分支上、review 後、刪除更新時不在新增內容審核內(不得不刪除檔案的情況)
．sync	進度同步到遠端數據庫，換人接手或其他人支援，必須先將手中代碼同步到遠端。公司與客戶端手動同步
．tmp(temporary:臨時)	暫存本地數據庫
．merge	手動合併時(公司端與客戶端有各自版控專案要同步

.gitignore 優先級別：
1. 從命令行中讀取可用的忽略規則
2. 當前目錄定義
3. 父級目錄定義
4. $GIT_DIR/info/exclude 文件中定義的規則
5. core.excludesfile 中定義的全局規則

在 .gitignore 文件中，每一行的忽略规则的语法如下：
1、空格不匹配任意文件，可作为分隔符，可用反斜杠转义
2、以“＃”开头的行都会被 Git 忽略。即#开头的文件标识注释，可以使用反斜杠进行转义。
3、可以使用标准的glob模式匹配。所谓的glob模式是指shell所使用的简化了的正则表达式。
4、以斜杠"/"开头表示目录；"/"结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件；"/"开始的模式匹配项目跟目录；如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，如果该模式不在 .gitignore 文件中，则相对于项目根目录。
5、以星号"*"通配多个字符，即匹配多个任意字符；使用两个星号"**" 表示匹配任意中间目录，比如a/**/z可以匹配 a/z, a/b/z 或 a/b/c/z等。
6、以问号"?"通配单个字符，即匹配一个任意字符；
7、以方括号"[]"包含单个字符的匹配列表，即匹配任何一个列在方括号中的字符。比如[abc]表示要么匹配一个a，要么匹配一个b，要么匹配一个c；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配。比如[0-9]表示匹配所有0到9的数字，[a-z]表示匹配任意的小写字母）。
8、以叹号"!"表示不忽略(跟踪)匹配到的文件或目录，即要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。需要特别注意的是：如果文件的父目录已经被前面的规则排除掉了，那么对这个文件用"!"规则是不起作用的。也就是说"!"开头的模式表示否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用"!"也不会再次被包含。可以使用反斜杠进行转义。


#               表示此为注释,将被Git忽略
*.a             表示忽略所有 .a 结尾的文件
!lib.a          表示但lib.a除外
/TODO           表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO
build/          表示忽略 build/目录下的所有文件，过滤整个build文件夹；
doc/*.txt       表示会忽略doc/notes.txt但不包括 doc/server/arch.txt
 
bin/:           表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件
/bin:           表示忽略根目录下的bin文件
/*.c:           表示忽略cat.c，不忽略 build/cat.c
debug/*.obj:    表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj
**/foo:         表示忽略/foo,a/foo,a/b/foo等
a/**/b:         表示忽略a/b, a/x/b,a/x/y/b等
!/bin/run.sh    表示不忽略bin目录下的run.sh文件
*.log:          表示忽略所有 .log 文件
config.php:     表示忽略当前路径的 config.php 文件
 
/mtk/           表示过滤整个文件夹
*.zip           表示过滤所有.zip文件
/mtk/do.c       表示过滤某个具体文件
 
被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。
 
需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中，如下：
!*.zip
!/mtk/one.txt
 
唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。为什么要有两种规则呢？
想象一个场景：假如我们只需要管理/mtk/目录中的one.txt文件，这个目录中的其他文件都不需要管理，那么.gitignore规则应写为：：
/mtk/*
!/mtk/one.txt
 
假设我们只有过滤规则，而没有添加规则，那么我们就需要把/mtk/目录下除了one.txt以外的所有文件都写出来！
注意上面的/mtk/*不能写为/mtk/，否则父目录被前面的规则排除掉了，one.txt文件虽然加了!过滤规则，也不会生效！
 
----------------------------------------------------------------------------------
还有一些规则如下：
fd1/*
说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；
 
/fd1/*
说明：忽略根目录下的 /fd1/ 目录的全部内容；
 
/*
!.gitignore
!/fw/ 
/fw/*
!/fw/bin/
!/fw/sf/
说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；注意要先对bin/的父目录使用!规则，使其不被排除。



cat ~/.gitconfig	// 查看 gitconfig 內容
-v --verbose
-q --quiet
--progress


Git 1.7.0 後，加入 Sparse Checkout 模式，使 Checkout 指定文件或文件夾成可能。
git config core.sparsecheckout true	// 開啟 Sparse Checkout 模式
echo "druid/doc" >> .git/info/sparse-checkout	// 設置需 Check Out 的文件
git pull origin main	// Check Out

git read-tree -mu HEAD	// 如果要 pull 別的部份檔案


-n --no-checkout	// Only .git，But still non-bare repository.
--bare		// 裸存儲庫，Only .git、no workspace。在創建裸倉庫時，Git 假定裸倉庫將作為多個遠程用戶(several remote users)的 origin repository，因此它不會創建 default remote origin。這意味著基本 git pull 和 git push 操作將不起作用，因為 Git 假定沒有工作區，您不打算向裸存儲庫提交任何更改：
~/Projects/bare$ git push
fatal: No destination configured to push to.
~/Projects/bare$ git pull
fatal: /usr/lib/git-core/git-pull cannot be used without a working tree.
~/Projects/bare$ 
(--bare means no checkout)
--mirror
-l --local
--no-hardlinks
-s --shared
--recurse-submodules[=<pathspec>]
--recursive ...
-j --jobs <n>

git push -f origin HEAD^:master		// 取消遠端的 push

commit 沒用 -m 會啟動文本編輯器以便輸入本次提交的說明。(默認啟用 shell 的環境變量 $EDITOR 所指定的軟件，一般都是 vim、emacs，可使用 git config --global core.editor 命令設定喜歡的編輯器)
1. 按 i 進入 insert 模式
2. 修改最上面那行黃色提交說明
3. 按 Esc 
4. :wq (離開)

ZZ(兩次大寫Z)離開 git editor

mkdir/md
rmdir/rd
cd
rm
git init

--------------------------------------------------
1. fetch、2. merge、rebase、3. pull

The short answer to question #1 is: Git picks one of your remotes to fetch from, and then fetches from that remote. The remote Git picks is from the remote = name setting under the [branch] section. If there isn't any such setting, Git uses origin.

The answer to question #2 is: Git picks some name to use, as if you had run git merge name or git rebase name. The name is based on the merge = ref setting under the [branch] section—but the way this works is somewhat obscure: if this same section says, for instance, remote = origin and branch = refs/heads/master, the name Git picks to use is not master but rather origin/master. If it says remote = origin and branch = develop, the name Git picks is origin/develop, and so on.

(While this looks very straightforward, the actual mapping inside Git is rather tricky: if the section says remote = . and branch = master, the name is master, not ./master, for instance. If you set up unusual fetch refspecs, even more weirdness can happen. This answer does not cover this last case at all.)

The answer to question #3 is in some ways the easiest: git pull simply runs git fetch first, then—provided that succeeds—one of the other two commands, git merge or git rebase, so you really only have to look at questions 1 and 2.
--------------------------------------------------


本地分支重命名(未推送到遠程)
git branch -m <oldName> <newName>

遠程分支重命名(已推送遠程，假設本地分支和遠程對應分支名稱相同)
git branch -m <oldName> <newName>	// 重命名遠程分支對應的本地分支
git push --delete origin oldName		// 刪除遠程分支
git push origin <newName>		// 上傳新命名的本地分支
git branch --set-upstream-to origin/newName、git branch -u origin/newName	// 把修改後的本地分支與遠程分支關聯
git push -u origin newName		// 合併上述兩行

git branch --unset-upstream [branchName]	// 解除當前或其他分支的遠程分支關聯
git br -u origin/name name	// 不切換分支直接設置其他分支的 upstream
git push -u origin name : name	// 或 push 的時候直接設置
git remote add、git branch --set-upstream-to	// 前者把所有的遠程分支都抓下來，後者可以單獨跟蹤分支

git branch
git branch <new-branch>
git branch -d <local-branch>	// 刪除分支
git checkout <local-branch>
git checkout -b <new-branch>	// 到達新創建分支，同名則報錯
git checkout -B <new-branch>	// 有同名分支也要強制覆蓋
git checkout --orphan <new_branch>	// 基於當前所在分支創建一個無提交歷史紀錄的分支
git checkout --merge <branch>	// 將當前的分支同步到前往的分支
^^^ 需要注意：
1. 如果當前分支和切換分支間的內容不同的話，容易造成衝突。
2. 切換到新分支後，當前分支修改過的内容就丟失了。
git checkout -p <branch>	// 比較兩個分支或文件中的差異
git checkout --track -b foobar origin/foobar 將遠端的 branch checkout 回來並建立一個新的 local branch，加上 --track 表示你之後還要pull、push回去，所以請 Git 記住對應關係。


ls -a						// 查看檔案(含隱藏)	MacOS: ll -la
./ ../ .git/
rm -rf .git						// 刪除倉庫文件夾下隱藏的 .git 文件夾(分支刪除)
git log -p -2					// -p 顯示每筆提交的修改內容；-2 限制只輸出最後兩筆
git log --pretty=oneline
git clone <url>					// 下載遠端數據庫
git clone -b develop --single-branch			// 複製指定的分支
git rebase --abort					// 代碼回退

git status
git add <file>
git add -A						// 當前目錄下所有文件加入暫存

git restore <file>					// 從 index 中回溯
git commit -m <message>
git commit -am <message> / git commit -a -m <message>	// -a / --all，要注意 untracked files 狀態的檔案不受此命令作用

git remote add <遠端數據庫簡稱> <url>			// 加入遠端數據庫
git remote set-url origin --push --add <遠端數據庫簡稱> <url>	// 多了一些 arguments
git remote						// 觀看遠端數據庫列表
git remote -v					// 觀看遠端數據庫列表(包含 url)
git remote add origin https://github.com/rsosor/demo.git
git remote add origin git@github.com:rsosor/demo.git

git fetch <remote name> 這個指令一次只能更新一個 remote
如果你的專案底下有多個 remote，而且全部都想要更新的話，就可以使用這個指令
git fetch --all 指令也等同於以下這個指令
$ git remote update

git pull
git pull --rebase origin main	// rebase 就不會有合併補丁(Merge Patch)，如果 conflict 比較多則需要依次處裡不使用 rebase。想要把 rebase 當做 git pull 的預設值，可以在專案的 .git/config 加上
git pull 的作用等同於以下的指令
$ git fetch <remote name>
$ git merge remotes/<remote name>/<remote branch>
git merge origin/<repo> --allow-unrelated-histories
git pull origin/<repo> --allow-unrelated-histories


[branch "master"]
  remote = origin
  merge = refs/heads/master
  rebase = true

也可以直接加到 ~/.gitconfig 讓所有的 tracked branches 都自動套用這個設定：


[branch]  
  autosetuprebase = always

git pull (<local_branch_name> origin/<remote_branch_name>) 去遠端 fetch 新版並 merge 進 local branch
如果覺得這種 local branch 和 remote branch 的 merge commit log 很煩，建議可以改使用 git pull –rebase 變成 fast-forward 形式 (就會變得像 svn up，而不會有 merge commit log)。簡單說就是先砍掉 local branch 分岔點之後自己的 commit，然後把遠端的 commit 先一個個 apply 進來，最後再把自己的 commit 再 apply 進去 (如果有 conflict 會中途停下來，等你修好才會繼續 apply)，如此一來看線圖就會變成一條線而已，也就沒有所謂 merge 這個動作了。

git push
git push <數據庫簡稱> <分支名稱>
git push origin main
git push -u origin main
git push -u origin main -f	// -f 強制 force
git push 預設的遠端是 origin，並且會將所有有和 remote 有對應的 local branch 都 push 上去。如果要把新的 local branch push 上去，需要下 git push origin <local_vranch_name> 指令。
git push 也可能會失敗，例如出現 ! [rejected] master -> master (non-fast forward)，這個 non-fast forward 的意思是你的 parent commit 和遠端的不相同，也就是線圖有分岔，需要先 pull 回來處理好 merge 才能 push 上去。
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Git commit 修改之 1 – git commit --amend
透過這樣的方式修改後 git commit hash 會變得與原本不相符，對比前面的 commit hash 就能看到不同。要上傳到 GitHub 的話會需要 force push：
--amend：參數只能修改最後一次 Commit 的訊息

Git commit 修改之 2 – git commit --author --date
--author --date：作者跟時間換掉
git commit --amend --author="Guido van Rossum <guido@python.org>" --date="Wed Feb 16 14:00 2011 +0100"
--date 格式支援三種：Git internal format、RFC 2822、ISO 8601
有兩點偽裝缺失
1. GitHub commit log 的頁面上變成了 gvanrossum commited with John Doe on Feb 16 2011
我希望變成是 Guido 上傳的，而不是 commited with John Doe。
2. repo 首頁的地方 README.md 的修改時間卻顯示為 3 minutes ago ……？
應該要是 6 years ago。
看看完整的 Git informations – git cat-file
原來 git log 並不是完整的資訊，完整資訊要使用 git cat-file 才會顯示出來：
git cat-file -p HEAD
tree f93e3a1a1525fb5b91020da86e44810c87a2d7bc
author Guido van Rossum <guido@python.org> 1297861200 +0100
committer John Doe <johndoe@example.com> 1496243512 +0800
 
Amend the commit message

Author 跟 Committer 是不同的，所以 GitHub 才會顯示為 committed with John Doe。

Git commit 修改之 3 – committer
用 git config 把 user.name 修改就可以了：
git config user.name "Guido van Rossum"
git config user.email "guido@python.org"
Git commit 修改之 4 – committer date
剩下 Git committer date 需要修改，修改不能使用 --date 來改，這樣只會修改到 Author 的日期。必須要透過 environment variable GIT_COMMITTER_DATE 來做修正：GIT_COMMITTER_DATE 一樣可以接受三種格式。
GIT_COMMITTER_DATE="Wed Feb 16 14:00 2011 +0100" git commit --amend

恩，commit log 顯示 gvanrossum committed on 16 Feb 2011，而 repo 首頁 README.md 的 commit 時間顯示為 6 years ago。

至於有沒有辦法讓 git commit 變得可信呢？其實是有的，請參考 Git Pro: Signing Your Work，裡面有提到如何使用 GPG 來簽署 Git commit，非常值得一讀。至於被 GPG  簽署過的 commit 在法律上有沒有效力能夠代表一個自然人的所作所為 (GPG key 對應到自然人)，這我就不知道了。

git rebase：如果想要修改其它更早的訊息
git rebase -i <sha-1>		// -i 指要進入 rebase 指令的「互動模式」，sha-1 是指應用範圍「從現在到 sha-1 這個 commit(不包括這個 commit)」，此指令會跳出 Vim。

前面的 pick 意思是「保留這次 commit 不做修改」
假設把這三行
pick sha-1 <message>
pick sha-1 <message>
pick sha-1 <message>
前面的 pick 改成 reword 或 r
reword sha-1 <message>
reword sha-1 <message>
reword sha-1 <message>
表示要修改這三次 commit 的訊息。存檔並離開之後，立馬就會再跳另一個 Vim 編輯器畫面：
會有三次的 reword

如果你仔細看，那兩次 Commit 的 SHA-1 值都變了。
在「另一種合併方式（使用 rebase）」，Commit 物件並不是剪下、貼上而已，而因為要接的前一個 Commit 不同（其實時間也不同），所以會重新計算並做出一顆新的 Commit。

因為 Commit 物件的訊息也會影響 SHA-1 的計算，因為訊息改了，所以 Git 會做出新的 Commit 物件來替代原本舊的 Commit。
不只這樣，在剛剛這個例子裡，因為這三顆 Commit 物件換掉了，在它之後的 Commit 因為前面的歷史改了，所以後面整串的 Commit 全部都重新做出新的 Commit 出來替代舊的 Commit。

如果想要取消這回的 Rebase 的話，只要這樣：
git reset ORIG_HEAD --hard
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
剛 git clone 完只會有本地 main 分支，如何切換到遠程分支：
git checkout -b newBranch  origin/newBranch
git branch newBranch origin/newBranch


git rm --cached test.js		// 如果我們想將忽略文件添加到緩存中，rm 命令將其從中移除


# git branch --track frontend origin/frontend
git pull <branch> = git fetch <branch> && git merge <branch>

其他操作：
git fetch 把遠端的 branch 更新下載回來，但不會 merge 到 local branch
git branch -r 顯示 local 有追蹤的遠端 branch。注意到你不能直接修改這個 remote branch，一定要用一個 local branch 對應它。
git remote show origin 顯示遠端 server 的 branch
git remote add foobar git:// 可以新增別的 repo. 位置，於是 pull 的時候就可以指定要從哪一個遠端更新回來。
git push origin :foobar 刪除遠端的 branch
--------------------------------------------------
如果要換 branch 的暫時的解決方式是使用 git stash 會先把修改暫存下來，要回復則執行 git stash pop。
$ git stash // 儲存工作區
Saved working directory and index state WIP on feature-entryForm: 432811f 修改樣式
 
$ git stash list  // 查看儲存紀錄
stash@{0}: WIP on feature-entryForm: 432811f 修改樣式
 
$ git status
On branch feature-entryForm
Your branch is up to date with 'origin/feature-entryForm'.
 
nothing to commit, working tree clean

   （1）用 git stash apply，恢復後，stash 內容並不刪除，需要用 git stash drop 來刪除

   （2）用 git stash pop，恢復的同時把 stash 內容也刪了

丟失 stash，找回 commitID 有兩種方法：

    1、git stash pop 最後會印出 pop 掉的 commitId 值，若這個紀錄還存在就直接使用。

    2、git fsck --lost-found 會印出所有 dangling commit。

大概有三種類型的內容，blob、tree 和 commit。
我們這樣看不出有用信息，需要另外一條命令顯示：
git show commitId
--------------------------------------------------
就算把還沒完成的東西 commit 也不會怎麼樣，只要還沒 push 出去一切 commit 紀錄都是可以改的。
可以使用這個命令來取消 commit：
git reset --soft HEAD^
git reset --hard HEAD^	// 回退到上個版本
git reset --hard commit_id	// 退到/進到 指定 commit_id
git reflog	// 查看所有分支的所有操作紀錄包括 commit 、已經被刪除的 commit 和 reset 的操作

git add --patch	// 把一個檔案切成好幾次 commit(從上到下是新~舊 stack FILO感覺)
我想把這次 index.js 新增的內容分次提交，那就下 git add -p index.js，接著按 e 進到編輯畫面，有 + 開頭的就是你這次新增的內容
就可以把想 add 的加號留著，其他不想 add 的部分刪掉，git 就只會把有加號的那幾行加進 staging area，而其他刪掉的部分就繼續留在 unstaged 狀態
習慣用 GUI 的話，大部分的 IDE 也會提供 add patch，只要把想加入 Staging 選起來，然後點 Stage Selected Ranges 就好

Git rebase
任務一：調整 commit 順序
git rebase -i {7碼}	// -i 是 interactive 的意思，{} 是基準位置的 commit ID，代表我要用 interactive rebase 來調整某 commit 到之後的 commit
按照順序把這些 commit 的變更疊加起來而成的(從上到下是舊~新)
只要調整 pick 的順序，例如把 Add file3 移到最下面，Git 就會按照 1 -> 2 -> 4 -> 5 -> 3 的順序把 commit 疊加起來，產生最新的 main
結束 rebase 之後，之前 main 的所在位置會被改名叫 ORIG_HEAD
對於 rebase 後的結果不滿意的話，只要下 git reset --hard ORIG_HEAD 就能回到之前 1 -> 2 -> 3 -> 4 -> 5 的順序

任務二：刪除 commit
pick 指令改成 drop 就好了。



Git 有三個配置文件：版本庫級別、全局(用戶主目錄下)、系統級，採用的是 INI 文件格式，節、鍵、值組成。
[user]
	name = <name>
	email = <email>
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
[remote "origin"]
	url = <url>
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/master

（1. 版本庫級別配置文件）
root/.git/config
修改配置文件：三種方式
1.1 用 VIM 打開配置文件
1.2 用命令打開配置文件
git config -e
1.3 用命令修改屬性值
1.3.1 設置鍵值
git config <section>.<key> <value>
git config a.b something
[a]
	b = something
1.3.2 讀取鍵值
git config <section>.<key>
git config a.b
something
1.3.3 刪除
git config --unset <section>.<key>
1.3.4 git config 操作其他的 INI 格式文件(包括不在 git 工作區的文件)
git_config = filename git config <section>.<key> <value>
git_config = filename git config <section>.<key>
filename 包括文件的路徑，沒路徑預設當前目錄，如果沒有此文件，創建文件。

（2. 全局配置文件）
~/.gitconfig
git config --global <section>.<key> <value>
git config --global <section>.<key>
git config --global -e
（3. 系統配置文件）
/etc/gitconfig
可以用 git config --system -e 打開配置文件
git config --system <section>.<key> <value>
git config --system <section>.<key>
git config --system -e

Windows上git status 顯示中文亂碼		// git config --global core.quotepath false

___________________________________________________________________________________________________________________________________________________________________________________________________________________
查看分支
git branch #列出**本地**所有的分支
查看分支详细信息
git branch -v #列出本地所有的分支, + hash 信息
查看分支与远程的关联
git branch -vv #列出本地所有的分支, + hash 信息 + 与远程的关联信息
虽然默认本地和远程大部分都是同名的, 但是在多分支的场景下还是会出现不同名的情况
通过这个命令进行确认, 非常好用.

查看所有分支
git branch -a #列出所有的分支(远程和本地)
这个命令在拉取别人的分支的时候非常有用, 比如

git branch -a | grep xxx
git checkout -b xxx origin/xxx
___________________________________________________________________________________________________________________________________________________________________________________________________________________
keep
．移動本地庫HEAD指針
．重置工作區

本地代碼是你回退版本的代碼，而暫存區沒有做任何改變。

模式		mixed 模式	soft 模式		hard 模式

工作目錄		不變		不變		丟掉

暫存區		丟掉		不變		丟掉



模式			mixed 模式（預設）	soft 模式		hard 模式

Commit 拆出來的檔案	丟回工作目錄		丟回暫存區	直接丟掉
___________________________________________________________________________________________________________________________________________________________________________________________________________________

1.1、git reset [-q] [<commit>] [--] <paths>...
說明：使用指定提交下的文件替換暫存區的文件(兩個 -- 為了避免路徑和引用指向的提交同名衝突)，不會改變工作區和引用指向的提交
例如：git reset HEAD <paths>相当于git add <paths> 的反操作

1.2、git reset (--patch | -p) [<tree-ish>] [--] [<paths>...]
說明：選擇性將指定提交的文件內容替換暫存區的文件內容
例如：git reset -p HEAD <paths> 相當於 git add -p <paths> 的反操作

（比對 HEAD 與指定版本差異）
git diff		// 比對 HEAD 與全部 unstaged 檔案的差異
git diff --cached	// 比對 HEAD 與全部 staged 檔案的差異
git diff --staged	// 此為 --cached 的別名
git diff HEAD	// 比對 HEAD 與全部 unstaged, staged 檔案的差異
這邊的 HEAD 也可以換成最新 commit 紀錄的 SHA-1 值或是指定比對的版本 HEAD^ / HEAD~1

簡單說明比對的標示：
diff --git：將哪兩個檔案進行比對
10064：檔案屬性，表示 Regular non-executable file
100664：Regular non-executable group-writeable file
100755：Regular executable file
120000：Symbolic link
160000：Gitlink
@@ -1,3 +1,7 @@：前面為舊版本總行數，後面為新版本總行數

git diff HEAD~1
在添加指定版本的 git diff 指令中，預設比對的是 HEAD (這指最新 commit 紀錄)，但你會發現它連同 uncommitted 的內容也進行了比對，建議如果要指定版本進行比對，最好在無 uncommitted 狀態下進行比對，避免混亂，執行以下命令：
git add .
git commit -m "edit index.html all.css"

git diff HEAD~2
這樣就可以確保當前比對的版本為 HEAD (指最新 commit 紀錄) 與 HEAD 的前一個版本。

（比對不同版本間差異）
事實上，剛剛的 git diff HEAD~2 等同於以下指令：
git diff HEAD^^ HEAD
我們可以比對指定兩個版本間的差異，前面的 HEAD^^ 代表較舊的版本，後面的 HEAD 代表較新的版本，千萬不要把兩者寫反了，這樣的結果也會是相反的，讓我們試試比較不同的版本：
HEAD 代表的是我們當前所在的版本，你也可以使用 SHA-1 值作為比對的依據，任何能代表 commit 節點的稱謂都可以。

（使用 difftool 比對檔案）
通過 git bash 配置 difftool (VSCode 示範)：
git config --global diff.tool vscode
git ocnfig --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE'
通過 .gitconfig 配置 difftool (VSCode 示範)：
[diff]
    tool = vscode
[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE

此時即可使用 difftool 比對檔案：
git difftool -y HEAD^	// -y 代表同意
你也可以使用以下命令全局關閉對話提示：
git config --global difftool.prompt false

（回顧）
# 省略 git add 提交至本地數據庫 (限以追蹤或存在於索引區檔案)
git commit -am 'message'

# 省略 git add 提交至本地數據庫 (同上)
git commit -a -m 'message'

# 比對 HEAD 與尚未進索引區檔案差異
git diff

# 比對 HEAD 與已進索引區檔案差異
git diff --cached

# 比對 HEAD 與已進索引區檔案差異 (同上)
git diff --staged

# 比對 HEAD 與 uncommitted 檔案差異
git diff HEAD

# 比對 uncommitted 與指定版本差異 (當前為 uncommitted 狀態)
git diff HEAD~1

# 比對 HEAD 與指定版本差異 (當前為 nothing to commit 狀態)
git diff HEAD^

# 比對兩個不同版本間差異 (舊版本 - 新版本)
git diff HEAD^^ HEAD

# 將 VSCode 設為 difftool 默認開啟工具
git config --global diff.tool vscode
git config --global difftool.vscode.cmd 'code --wait --diff $LOCAL $REMOTE'

# 全局關閉 difftool 對話提示
git config --global difftool.prompt false
___________________________________________________________________________________________________________________________________________________________________________________________________________________
git reset -p lyrics.txt #用当前分支HEAD指向的版本库内容替换暂存区的内容
s # 分割成更小的块
n #不替换暂存区的内容
y #替换暂存区的内容
git diff --cached lyrics.txt #查看暂存区和版本库的区别


y - 这块从暂存区退出
n - 这块不从暂存区退出
q - 退出 不做任何操作
a - 将此块和之后的块都退出暂存区
d - 将此块和之后的块都不退出暂存区
g - 在输入s后 选择跳去那一个块
/  - 在输入s后 使用正则表达式找到块
j - 离开当前未决定的块，跳到下一个未决定的块
J - 离开当前未决定的块, 跳到下一个块
k - 离开当前未决定的块, 跳到前一个未决定的块
K - 离开当前未决定的块, 跳到前一个的块
s - 将当前块分割为更小的块(注意连在一起的不能被分割的再小了)
e - 编辑当前块
? - 打印帮助

1.3 git reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [<commit>]
说明：此操作会重置提交的引用
例子中使用的初始环境都如下所示：

1.3.1、三种动作
1⃣️ 替换引用的指向，指向新的提交。
2⃣️ 替换暂存区。暂存区内容将和指定的提交内容一样。
3⃣️ 替换工作区。工作区和指定的提交内容一样。

1.3.2、 不同的参数会执行不同的动作
-- soft : git reset --soft <commit>
只执行动作 1⃣️。
🌰举个栗子:
模拟一次错误的提交，撤销提交后，再查看效果

git commit -m "我好像写了一个错误的提交说明"
git log --oneline --graph
git reset --soft HEAD^ # HEAD^ 在当前况下相当于最后一次提交的前一次提交
git diff #查看工作区和暂存区的区别
git diff --cached #查看暂存区和版本库的区别

结果说明：工作区和暂存区都恢复到了初始环境的样子，只有上一次提交消失了。
注：修补提交命令 git commit --amend，用于将最新的提交进行重新提交以修补错误的提交说明。其相当于执行了如下命令（.git/COMMIT_EDITMSG保存了上次的提交日志，可以直接修改）

git reset --soft HEAD^
git commit -e -F .git/COMMIT_EDITMSG

--mixed git reset --mixed [-N] <commit>
不带参，则默认为此参数。执行动作1⃣️2⃣️。
🌰举个栗子

git commit -m "我来试一下 --mixed"
git log --oneline --graph
git reset d6ea103 #此处的 d6ea10 只是我的上次提交id，不具有普遍性
# git reset --mixed d6ea103 等同于上一个命令
# git reset --mixed HEAD^ 同上 此命令具有普遍性
git diff #查看工作区和暂存区的区别
git diff --cached #查看暂存区和版本库的区别

结果说明：git diff可以很明显看出来之前加入暂存区的既替余以蕙纕兮，又申之以揽茝。，现在已经被退出暂存区了。但是本地文件没有变化。

--hard git reset --hard <commit>
执行动作1⃣️2⃣️3⃣️。慎用，会改掉工作区文件。
git commit -m "我再悄咪咪试一下 --hard"
git log --oneline --graph
git log --pretty=oneline
git reset --hard HEAD^
git diff #查看工作区和暂存区的区别
git diff --cached #查看暂存区和版本库的区别
git diff HEAD #查看工作区和版本库的区别
cat lyrics.txt #查看 lyrics.txt 的内容

结果说明：可以看到工作区、暂存区、版本库都没有任何区别了，再看看 lyrics.txt 的内容，就可以发现刚刚工作区的改动全都不见了 ¯\_(ツ)_/¯，如果有需要的改动，从未提交过的内容真的是凉凉。但是之前提交过的541c01c (HEAD -> master) 我再悄咪咪试一下 --hard的内容既替余以蕙纕兮，又申之以揽茝。还是可以找回来的 ----- [撤销后又后悔待补充]

--merge git reset --merge <commit>
如果撤销的是上一个操作是 git pull，执行动作1⃣️2⃣️3⃣️。工作区如果有改动的话，会停止重置。慎用，会改掉工作区文件。
如果撤销的是上一个操作是 git merge，则执行动作1⃣️3⃣️。虽然工作区本地文件被重置了，但是暂存区会有之前本地的修改。还是慎用。
🌰栗子见 git merge 撤销
--keep git reset --keep <commit>
执行动作1⃣️2⃣️3⃣️。但是工作区如果有未提交的内容的话，会停止重置。慎用，会改掉工作区文件。
🌰举个栗子
为了方便写注释(#开头的为注释)，此次把所有的都拷下来，图片还在后面有附 ^_^


#先将初始环境的暂存区内容提交了
steamed-bundeMacBook-Pro:gitTest steamed-bun$ git commit -m "再用 --keep 试一下喽"
[master e8c694e] 再用 --keep 试一下喽
 1 file changed, 1 insertion(+)
#再将初始环境的内容加到暂存区
steamed-bundeMacBook-Pro:gitTest steamed-bun$ git add lyrics.txt 
#再在文件 lyrics.txt 中加入新内容
steamed-bundeMacBook-Pro:gitTest steamed-bun$ echo "怨灵修之浩荡兮，终不察夫民心。" >> lyrics.txt 
#查看文件  lyrics.txt 
steamed-bundeMacBook-Pro:gitTest steamed-bun$ cat lyrics.txt 
离骚--高考必背
长太息以掩涕兮， 哀民生之多艰。
余虽好修姱以鞿羁兮，謇朝谇而夕替。
既替余以蕙纕兮，又申之以揽茝。
亦余心之所善兮，虽九死其犹未悔。
怨灵修之浩荡兮，终不察夫民心。
#查看工作区和暂存区的区别 
steamed-bundeMacBook-Pro:gitTest steamed-bun$ git diff 
diff --git a/lyrics.txt b/lyrics.txt
index 9fe96f6..9b05a22 100644
--- a/lyrics.txt
+++ b/lyrics.txt
@@ -3,3 +3,4 @@
 余虽好修姱以鞿羁兮，謇朝谇而夕替。
 既替余以蕙纕兮，又申之以揽茝。
 亦余心之所善兮，虽九死其犹未悔。
+怨灵修之浩荡兮，终不察夫民心。
#查看暂存区和版本库的区别
steamed-bundeMacBook-Pro:gitTest steamed-bun$ git diff --cached
diff --git a/lyrics.txt b/lyrics.txt
index bedad0e..9fe96f6 100644
--- a/lyrics.txt
+++ b/lyrics.txt
@@ -2,3 +2,4 @@
 长太息以掩涕兮， 哀民生之多艰。
 余虽好修姱以鞿羁兮，謇朝谇而夕替。
 既替余以蕙纕兮，又申之以揽茝。
+亦余心之所善兮，虽九死其犹未悔。
#执行撤回命令 可以看到 git 的提示
steamed-bundeMacBook-Pro:gitTest steamed-bun$ git reset --keep HEAD^
error: Entry 'lyrics.txt' would be overwritten by merge. Cannot merge.
#错误：文件 'lyrics.txt' 将被合并覆盖，但是无法合并。
fatal: Could not reset index file to revision 'HEAD^'.
#致命：无法将索引文件重置为“HEAD ^”。
#再试一下将工作区的内容全部提交到暂存区
steamed-bundeMacBook-Pro:gitTest steamed-bun$ git add lyrics.txt 
#在执行撤回命令 依然失败
steamed-bundeMacBook-Pro:gitTest steamed-bun$ git reset --keep HEAD^
error: Entry 'lyrics.txt' would be overwritten by merge. Cannot merge.
fatal: Could not reset index file to revision 'HEAD^'.
#查看工作区和暂存区确实无区别 （其实应该先查看的 囧rz）
steamed-bundeMacBook-Pro:gitTest steamed-bun$ git diff
#将 lyrics.txt 加入到暂存区的内容撤出
steamed-bundeMacBook-Pro:gitTest steamed-bun$ git reset -- lyrics.txt 
Unstaged changes after reset:
M   lyrics.txt
# 可以看到已全部撤出了暂存区了
steamed-bundeMacBook-Pro:gitTest steamed-bun$ git diff 
diff --git a/lyrics.txt b/lyrics.txt
index bedad0e..9b05a22 100644
--- a/lyrics.txt
+++ b/lyrics.txt
@@ -2,3 +2,5 @@
 长太息以掩涕兮， 哀民生之多艰。
 余虽好修姱以鞿羁兮，謇朝谇而夕替。
 既替余以蕙纕兮，又申之以揽茝。
+亦余心之所善兮，虽九死其犹未悔。
+怨灵修之浩荡兮，终不察夫民心。
#进入 vim 删除最后两句新内容 直接打开文件删除也是一样的 
steamed-bundeMacBook-Pro:gitTest steamed-bun$ vim lyrics.txt 
#查看文件内容 可以看到已经不见了
steamed-bundeMacBook-Pro:gitTest steamed-bun$ cat lyrics.txt 
离骚--高考必背
长太息以掩涕兮， 哀民生之多艰。
余虽好修姱以鞿羁兮，謇朝谇而夕替。
既替余以蕙纕兮，又申之以揽茝。
#查看区别
steamed-bundeMacBook-Pro:gitTest steamed-bun$ git diff
steamed-bundeMacBook-Pro:gitTest steamed-bun$ git diff --cached
#再执行撤回命令
steamed-bundeMacBook-Pro:gitTest steamed-bun$ git reset --keep HEAD^
#再次查看文件内容 已经可以看到工作区回到了上一此提交后的情况
steamed-bundeMacBook-Pro:gitTest steamed-bun$ cat lyrics.txt 
离骚--高考必背
长太息以掩涕兮， 哀民生之多艰。
余虽好修姱以鞿羁兮，謇朝谇而夕替。
steamed-bundeMacBook-Pro:gitTest steamed-bun$ git diff 
steamed-bundeMacBook-Pro:gitTest steamed-bun$ git diff --cached
___________________________________________________________________________________________________________________________________________________________________________________________________________________
（Error）
(E1)：因為 push 了想要回退，用了 idea 的 drop commit 刪除本地預回退的 commit(可能對應的是 rebase 指令)，結果本地遠程 > 本地。本地遠程是 Only Read 拿來追蹤遠程，現在本地分支 < 本地遠程、遠程。(origin/main 也看不見)
git push

To github.com:rsosor/RsosoR.git
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to 'github.com:rsosor/RsosoR.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
------------------------------------------------------------------------------------------------------------
git push origin/main、git push origin/main --force

fatal: 'origin/main' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
------------------------------------------------------------------------------------------------------------
(E2)：Windows 換行 CRLF，Linux 換行 LF，所以執行 git add . 時會出現 warning。
git add .

warning: LF will be replaced by CRLF in package.json.
The file will have its original line endings in your working directory

（Answer）
(A1)：本地遠程、遠程都退到本地的分支，origin/main 也回來了。
git remote remove origin
git remote add origin git@github.com:rsosor/RsosoR.git
git push origin/main --force

(A2)：禁用自動轉換。
git config core.autocrlf false
___________________________________________________________________________________________________________________________________________________________________________________________________________________
Git 是基於元數據方式分布式儲存文件信息，會在每一次 clone 將所有信息都取回到本地
SVN 是基於文件方式儲存


