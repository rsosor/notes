jQuery 一共分了 1.x、2.x、3.x 這三個大版本。

jQuery 的版本都是不向後兼容的！ jQuery 的版本都是不向後兼容的！ jQuery 的版本都是不向後兼容的！重要的事情說三遍哈

一、1.x、2.x、3.x
1.x版本：兼容 ie678，使用最為廣泛的，官方只做 bug 維護，功能不再新增。因此一般項目來說，使用1.x版本就可以了，最終版本：1.12.4

2.x版本：不兼容 ie678，很少人使用，官方只做 bug 維護，功能不再新增。如果不考慮兼容版本低的瀏覽器可以使用2.x，最終版本：2.2.4

3.x版本：不兼容 ie678，只支持最新的瀏覽器。除非特殊要求，一般不會使用 3.x 版本的，很多老的 jQuery 插件不支持這個版本。目前該版本是官方主要更新維護的版本。截至2018年6月13日，最新版本：3.3.1

2.x 相較於 1.x 沒有增加什麼新特性，主要是去除了 ie678 的支持，提升了性能，減小了體檢。
3.x 相較於之前版本，增加了許多新特性，也改變一些以往的特性。


1，版本歷史
版本號	發佈日期	最新更新			大小（KB）	備註
1.0	2006年8月26日	 	 					第一個穩定版本
1.1	2007年1月14日	 	 	 
1.2	2007年9月10日	1.2.6				54	 
1.3	2009年1月14日	1.3.2				55.9		將 Sizzle 選擇器引擎引入核心
1.4	2010年1月14日	1.4.4				76	 
1.5	2011年1月31日	1.5.2				83		延遲回調管理，ajax 模塊重寫
1.6	2011年5月3日	1.6.4				89		顯著改善 attr() 與 val() 的性能
1.7	2011年11月3日	1.7.2 (2012年3月21日)		92		新的事件 API：.on() 和 .off()，而舊的 API 仍然支持。
1.8	2012年8月9日	1.8.3 (2012年11月13日)		91.4		重寫 Sizzle 選擇器引擎，改善動畫和 $(html, props) 的靈活性。
1.9	2013年1月15日	1.9.1 (2013年2月4日)		90		移除棄用接口，清理代碼
1.10	2013年5月24日	1.10.2 (2013年7月3日)		91		修複了 1.9 和 2.0 beta 版本周期的 bug 和差異
1.11	2014年1月24日	1.11.3 (2015年4月28日)		95.9
1.12	2016年1月8日	1.12.4 (2016年5月20日)		95
2.0	2013年4月18日	2.0.3 (2013年7月3日)		81.1		除去對 IE 6-8 的支持以提高性能，並降低文件大小
2.1	2014年1月24日	2.1.4 (2015年4月28日)		82.4
2.2	2016年1月8日	2.2.4 (2016年5月20日)		85.6
3.0	2016年6月9日	3.0.0 (2016年6月9日)		86.3		Deferred、$.ajax、$.when 支持 Promises/A+，令 .data() 兼容HTML5
3.1	2016年7月7日	3.1.1 (2016年9月23日)		86.3		加入 jQuery.readyException，ready handler 錯誤現在不會不顯示了
3.2	2017年3月16日	3.2.1 (2017年3月20日)		84.6		增加了對檢索<template>元素內容的支持，棄用了多種舊方法。
3.3	2018年1月19日	3.3.1 (2018年1月20日)		84.8		棄用舊函數，函數現在可以接受類，並支持其寫成數組格式。

1.x 常用版本
1.4.2：穩定性和兼容性都很出色，插件最多，但性能不如下面後面的幾個版本。
1.7.2：性能提升，插件第二多，ajax 和 attr 等 api 有少許修改。
1.8.3：最後一個支持 IE6 的穩定版
1.9.1：開始移除了不少方法，事件綁定推薦使用 on 方法一個代替所有的。
1.12.4：1.x 時代最後一個穩定版本，僅支持 IE8，不支持 IE6/7。
 
2.x、3.x 版本
除非有特殊要求（比如面向移動端），一般情況下這兩大版本使用人的確很少：

2.x 最後一個穩定版本：2.2.4

3.x 最新版本：3.3.1
移除舊的 IE 工作區
jQuery 3.0 運行在 Strict Mode 下
引進 for...of 循環
動畫方面採用新的 API
對包含特殊含義的字符串提供轉義的新方法
類操作方法支持 SVG
延遲對象現在與 JS Promises 兼容
jQuery.when() 對於多種參數的不同解讀
新的顯示/隱藏邏輯
對於防止 XSS 攻擊的額外保護
_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
$ 是 jQuery 的核心函數，$() 就是調用 $ 這個函數

1. 入參 函數 時
表示頁面加載完成之後，相當於 window.onload = function () {}

2. 入參 HTML 字符串
會創建這個 HTML 標籤對象

3. 入參 選擇器字符串
$("#id 屬性值");	id 選擇器，根據 id 查詢標籤對象
$("標籤名");		標籤名選擇器，根據指定的標籤名查詢標籤對象
$(".class 屬性值");	類型選擇器，根據 class 屬性查詢標籤對象

4. 入參 DOM 對象
會把 DOM 對象轉化為 jQuery 對象
var btnObj = document.getElementById("btn01");
alert(btnObj);		// [object HTMLButtonElement]
alert( $(btnObj) );	// [object Object]

Dom 對象
1. 通過 getElementById()
2. 通過 getElementByName()
3. 通過 getElementByTagName()
4. 通過 createElement()

jQuery 對象
1. 通過 jQuery 提供的 API 創建的對象
2. 通過 jQuery 包裝的 Dom 對象
3. 通過 jQuery 提供的 API 查詢到的對象

jQuery 對象是 dom 對象的數組 + jQuery 提供的一系列功能函數
jQuery 對象和 dom 對象是兩種不同的對象


jQuery 和 DOM 相互轉換：
DOM -> jQuery
var domObj = document.getElementById("userid");
var $jquObj = $(domObj);

$(document.getElementById("userid"));

jQuery -> DOM
var $jObj = $("#p1");
var domObj = $jObj[0];
$("#p1")[0];

var $jObj = $("#p1");
var domObj = $jObj.get(0);
$("#p1").get(0);


選擇器
#id
element
.class
*
selector1, selector2, selectorN



（核心）
jQuery 核心函數
	jQuery([sel, [context]])
	jQuery(html, [ownerDoc])
	jQuery(callback)
	jQuery.holdReady(hold)			1.6+
jQuery 對象訪問
	each(callback)
	size()
	length()
	selector
	context
	get([index])
	index([selector | element])
數據緩存
	data([key], [value])
	removeData([name | list])		1.7+
	$.data(element, [key], [value])
隊列控制
	queue(element, [queueName])
	dequeue([queueName])
	clearQueue([queueName])
插件機制
	jQuery.fn.extend(object)
	jQuery.extend(object)
多庫共存
	jQuery.noConflict([ex])
（屬性）
屬性
	attr(name | pro | key, val | fn)
	removeAttr(name)
	prop(name | pro | key, val | fn)	1.6+
	removeProp(name)	1.6+
CSS 類
	addClass(class | fn)
	removeClass([class | fn])
	toggleClass(class | fn[, sw])
HTML 程式/文本/值
	html([val | fn])
	text([val | fn])
	val([val | fn | arr])
（CSS）
CSS
	css(name | pro | [, val | fn])
位置
	offset([coordinates])
	position()
...
（選擇器）
基本
	#id
	element
	.class
	*
	selector1, selector2, selectorN
層級
	ancestor descendant
	parent > child
	prev + next
	prev ~ siblings
基本
	:first
	:last
	:not(selector)
	:even
	:odd
	:eq(index)
	:gt(index)
	:lt(index)
	:header
	:animated
	:focus					1.6+
內容
	:contains(text)
	:empty
	:has(selector)
	:parent
可見性
	:hidden
	:visible
屬性
	[attribute]
	[attribute = value]
	[attribute != value]
	[attribute ^= value]
	[attribute $= value]
	[attribute *= value]
	[attrSel1][attrSel2][attrSelN]
子元素
	:nth-child
	:first-child
	:last-child
	:only-child
表單
	:input
	:text
	:password
	:radio
...
（文檔處理）
內部插入
	append(content | fn)
	appendTo(content)
	prepend(content | fn)
	prependTo(content)
外部插入
	after(content | fn)
	before(content | fn)
	insertAfter(content)
	insertBefore(content)
包裹
	wrap(html | ele |fn)
	unwrap()
	wrapall(html | ele)
	wrapInner(html | ele | fn)
替換
	replaceWith(content | fn)
	replaceAll(selector)
刪除
	empty()
	remove([expr])
	detach([expr])
複製
	clone([Even[, deepEven]])
（篩選）
過濾
	eq(index | -index)
	first()
	last()
	hasClass(class)
	filter(expr | obj | ele | fn)
	is(expr | obj | ele | fn)		1.6+
	map(callback)
	has(expr | ele)
	not(expr | ele | fn)
	slice(start, [end])
查找
	children([expr])
	closest(expr, [con] | obj | ele)	1.6+
	find(expr | obj | ele)
	next([expr])
	nextall([expr])
	nextUntil([exp | ele][, fil])		1.6+
	offsetParent()
	parent([expr])
	parents([expr])
	parentsUntil([exp | ele][, fil])	1.6+
	prev([expr])
...
（事件）
頁面載入
	ready(fn)
事件處理
	on(eve, [sel], [data], fn)		1.7+
	off(eve, [sel], [fn])			1.7+
	bind(type, [data], fn)
	one(type, [data], fn)
	trigger(type, [data])
	triggerHandler(type, [data])
	unbind(type, [data | fn])
事件委派
	live(type, [data], fn)
	die(type, [fn])
	delegate(sel, [type], [data], fn)
	undelegate([sel, [type], fn])		1.6+
事件切換
	hover([over,] out)
	toggle(fn, fn2, [fn3, fn4, ...])
事件
	blur([[data], fn])
	change([[data], fn])
	click([[data], fn])
	dblclick([[data], fn])
	error([[data], fn])
	focus([[data]. fn])
	focusin([data], fn)
	focusout([data], fn)
	keydown([[data], fn])
	keypress([[data], fn])
	keyup([[data], fn])
	mousedown([[data], fn])
	mouseenter([[data], fn])
	mouseleave([[data], fn])
	mousemove([[data], fn])
	mouseout([[data], fn])
	mouseover([[data], fn])
	mouseup([[data], fn])
	resize([[data], fn])
	scroll([[data], fn])
	select([[data], fn])
	submit([[data], fn])
	unload([[data], fn])
（效果）
基本
	show([speed, [easing], [fn]])
	hide([speed, [easing], [fn]])
	toggle([speed], [easing], [fn])
滑動
...
（ajax）
ajax 請求
	$.ajax(url, [settings])
	load(url, [data], [callback])
	$.get(url, [data], [fn], [type])
	$.getJSON(url, [data], [fn])
	$.getScript(url, [callback])
	$.post(url, [data], [fn], [type])
ajax 事件
	ajaxComplete(callback)
	ajaxError(callback)
	ajaxSend(callback)
	ajaxStart(callback)
	ajaxStop(callback)
	ajaxSuccess(callback)
其他
	$.ajaxSetup([options])
	serialize()
	serializearray()
（工具）
瀏覽器及特性檢測
	$.support
	$.browser
	$.browser.version
	$.boxModel
數組和對象操作
	$.each(object, [callback])
	$.extend([d], tgt, obj1, [objN])
	$.grep(array, fn, [invert])
	$.sub()
	$.when(deferreds)
	$.makearray(obj)
	$.map(arr | obj, callback)		1.6+
	$.inarray(val, arr, [from])
	$.toarray()
	$.merge(first, second)
	$.unique(array)
	$.parseJSON(json)
函數操作
	$.noop
	$.proxy(function, context)
測試操作
	$.contains(container, contained)
	$.type(obj)
	$.isarray(obj)
	$.isFunction(obj)
	$.isEmptyObject(obj)
	$.isPlainObject(obj)
	$.isWindow(obj)
...

<script src="jquery-3.3.1.js"></script>
<script type="text/javascript">
　　$(function() {
// jQuery 第一種監聽事件方法
　　　　$("#btnId").click(function() {
　　　　　　alert("Hello world!");
　　　　});
// jQuery 第二種監聽事件方法
　　　　$("#btnId").bind("click"，function() {
　　　　　　alert("Hello world!");
　　　　});
// jQuery 第三種監聽事件方法
　　　　$("#btnId").on("click"，function() {
　　　　　　alert("Hello world!");
　　　　})；
// jQuery 第四種監聽事件方法
　　　　$("body").on({
　　　　　　click: function() {
　　　　　　　　alert("Hello world!");
　　　　　　}
　　　　}, "button");
// jQuery 第五種監聽事件方法
　　　　$("pody").on("click", "button", function() {
　　　　　　alert("Hello world!");
　　　　});
　　});
</script>
</head>

<body>
<button id="btnId">Hello</button>
</body>

第一種 click()，是一種比較常見的、便捷的事件監聽方法
第二種 bind()，已被 jQuery 3.0 棄用，自 jQuery 1.7 以來被 on() 方法（即第三種事件監聽方法）所取代，雖然在這也能使用且不報錯，而且此方法之前比較常見，但是不鼓勵使用
第三種 on()，從 jQuery 1.7開始，所有的事件繫結方法最後都是呼叫 on() 方法來實作的，使用 on() 方法實作事件監聽會更快、更具一致性
第四和第五，監聽的是 body 上所有 button 元素的 click 事件，DOM 樹裡更高層的一個元素監聽發生在它的 children 元素上的事件，這個程序叫作事件委托（event delegation）

window.onload = function () {
	var btnObj = document.getElementById("btnId");
	// alert(btnObj);	// [object HTMLButtonElement] -> dom 對象
	btnObj.onclick = function () {
		alert("js 原生的點擊事件");
	}
}


$(function () {							// 表示頁面加載完成之後，相當於 window.onload = function () {}
	// var btnObj = document.getElementById("btnId");
	// alert(btnObj);
	var $btnObj = $("#btnObj");
	$btnObj.click(function () {
		alert("jQuery 的點擊事件");
	});
});
_____________________________________________________________________________________________________________________________________________________________________________________________________________________________________________




