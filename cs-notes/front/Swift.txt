1. Swift Syntax Convertor
2. Swift 的版本跟 Xcode 版本** 很密切，升到新語法就回不去了！
3. Swift upgrade 時，改 Syntax 也是常有的事~

C Pointer使用上變複雜了！
現在要透過

UnsafePointer
UnsafeMutablePointer
UnsafeBufferPointer
UnsafeMutableBufferPointer

e.g.在C語言中，一個 C Array 可以這樣寫，那Swift如何做出一個C Array呢？

NSInteger index[4] = {0, 1, 2, 3};

printf("%ld, %ld, %ld, %ld\n", index[0], index[1], index[2], index[3]);


方式一，對 Address 一個一個賦值
//先決定一個開始的address位置
let start = UnsafeMutablePointer<Int>.alloc(0)
start.initialize(0)

//給定開始的address位置，和elemets的數量，以生成BufferPointer
let cArray = UnsafeMutableBufferPointer<Int>(start: start, count: 4)

//賦值，較早期的寫法
let index0 = cArray.baseAddress
index0.initialize(0)
let index1 = index0.successor()
index1.initialize(2)
let index2 = index1.successor()
index2.initialize(4)
let index3 = index2.successor()
index3.initialize(8)

print(index0.memory, index1.memory, index2.memory, index3.memory)


方式二，使用後期 UnsafeMutableBufferPointer 加入的 subscript
//先決定一個開始的address位置
let start2 = UnsafeMutablePointer<Int>.alloc(0)
start2.initialize(0)

//給定開始的address位置，和elemets的數量，以生成BufferPointer
let cArray2 = UnsafeMutableBufferPointer<Int>(start: start2, count: 4)

cArray2[0] = 0
cArray2[1] = 1
cArray2[2] = 2
cArray2[3] = 3

print(cArray2[0], cArray2[1], cArray2[2], cArray2[3])

// Swift 可以比 Objective-C 安全，且執行快速
Optional (第四章會說明)
if 不能沒有{}
Switch 預設 case 不穿透
不容易使用 Pointer

Swift 現在還在完備他的語法與基礎型別，從 2.0 開始， Swift 已可見獨立的決心，並導入自有的程式設計模式，且從 Opensource 釋出的 Swift 3.0 目標， Apple 已經確定會在2016年秋季推出Swift 3.0 時，完全脫離 Foundation Framework 的約束，,也就是不會再出現 NS 前綴的 Class ，成為完全獨立的語言。
由於 Swift 已經 Open Source ，以及 Swift 的在語法上與 Script Language 借鏡不少，再加上 LLVM 提供了 Swift 一個有如直譯器的執行環境。使得 Swift 在靈活度都將比 Objective-C 更高，更有彈性。
不論是開發 iOS/OSX ，其 CocoaTouch / Cocoa Frameworks 的介面操作都是相同，所以在切換的過程應不至於太困難。
___________________________________________________________________________________________________________________________________________________________________________________________________________________
Extension
Objective-C (Category)與 Swift (Extension)的比較
			Objective-C	Swift
Named			Category		Extension
Class			O		O
Struct			X		O
Enum			X		O
Protocol			X		O
Method Only		O		O
Variables			X		X
Implement Protocol		X		O


基本的Extension使用方式
import Foundation

extension NSURL {
	func getParams()->[String:String] {

		let components = NSURLComponents(URL: self, resolvingAgainstBaseURL: false)

		// 取出items，如果為nil就改為預設值 空陣列
		let queryItems = components?.queryItems ?? []

		return queryItems.reduce([String:String](), combine: { (var dict, item) -> [String:String] in
			dict[item.name] = item.value ?? ""
			return dict
		})
	}
}

let url = NSURL(string: "http://host/?first=grady&last=zhuo&github=1")
url?.getParams()


對現有型態進行擴充
extension Int {
	func repeats(word:String) -> [String] {
		return [String](count: self, repeatedValue: word)
	}
}

// 可以像script語言，直接對著數字做一些動作。
3.repeats("1")


對泛型Type進行擴充
extension Array where Element: Hashable {
	func combineHashString() -> String {

		/*
		var result = ""
		for element in self {
			result += "\(element.hashValue)"
		}
		*/

		return self.reduce("", combine: { (str, element) -> String in
			return str + "\(element.hashValue)"
		})
	}
}

let stringArray = ["Hello world", "My name is Grady"]
stringArray.combineHashString()


Extend時，實作指定 protocol
// 製作Dog的struct，並只包括 name
struct Dog {
	var name:String
}

// 產生 dog 的 instance
let dog = Dog(name: "Money")
// 一開始dog沒有hashValue
// dog.hashValue

// extend Dog 並實作Hashable的protocol
extension Dog : Hashable {

	// protocol Hashable需實作的hashValue getter
	var hashValue : Int {
		return self.name.hashValue
	}
}

// Hashable因繼承自protocol Equtable，所以需要實作 == 運算子所要處理的運算
func == (lhs: Dog, rhs: Dog) -> Bool {
	return lhs.hashValue == rhs.hashValue
}

Objective-C裡幾乎所有Class皆繼承自NSObject，因此所有的instance幾乎都有descritpion和debugDescription的property可以呼叫並覆寫，以自定義這物件裡轉為字串描述的依據，但Swift已預設無此機制。

___________________________________________________________________________________________________________________________________________________________________________________________________________________
Generic

泛型可以讓你定義型態的邊界，適用於任何類型的、靈活且可重用的函數和類型。可供編譯時期檢查、避免重複的代碼，清晰和抽象方式表達代碼意圖。
C++中術語叫Template，而Swift、Java、C#採用Generic(泛型)，但概念是相近的。

在Swift中，泛型可作用於以下：
1.Function
2.Classes/Structs/Enums
3.Protocol
4.Extension

1.Function
幾個function做很像的事情，例如交換兩個數字、交換兩個字串
// 交換兩個數字
func swapInts(inout lhs: Int, inout _rhs: Int) {
	let temp = lhs
	lhs = rhs
	rhs = temp
}

var a = 10
var b = 11
swapInts(&a, &b)

// 交換兩個字串
func swapStrings(inout lhs: String, inout _rhs: String) {
	let temp = lhs
	lhs = rhs
	rhs = temp
}

var aString = "Hello"
var bString = "World"
swapStrings(&aString, &bString)

我們可以定義一個function叫swapValues，並透過泛型的Type來通吃對換這件事

a.泛型Function的語法一:
func FName<Type>(a: Type, [Arguments...])->Void

代表泛型對象代表的Type將透過傳入值的Type來動態決定
//一個通用於任何型別的swapValues的函式
func swapValues<Type>(inout lhs: Type, inout _rhs: Type) {
	let temp = lhs
	lhs = rhs
	rhs = temp
}

var c = 12
var d = 13
swapValues(&c, &d)

var cString = "123"
var dString = "456"
swapValues(&cString, &dString)

b.泛型Function語法二:
func FName<Type>([Arguments...])->Type

代表Type的依據是透過傳出值決定
func convertTo<Type>(value: Any)->Type? {
	// 這裡只先做單純的轉型
	// 如果型別可以強轉成功，就回傳，沒有就會回傳一個Optional
	return value as? Type
}

let str = "123"
let outputStr: String? = convertTo(str)
let outputInt: Int? = convertTo(str)	// 這裡就會回傳出nil

c.泛型Function語法三:
func FName<Type>(a: Type, [Arguments...])->Type

代表Type的依據是透過傳入值和回傳值兩個相同的Type決定
func test<Type>(a: Type)->Type? {
	return a
}

let output:String? = test("124")
let output:Int? = test("123")	// 這一句會失敗，因為傳入的是字串，但輸出是 Int? 就不成立

Swift內建的swap就是泛型的Function。


2.Class/Struct/Enum
常見的如Array/Dictionary就是泛型的容器用法。

語法糖衣說明:
[Int] ==> Array
[String:Any] ==> Dictionary

let intArray:[Int] = Array<Int>(count: 10, repeatedValue: 10)
let dict:[String:Any] = Dictionary<String, Any>(dictionaryLiteral: ("name", "grady"))

假設我們有一個Person的Struct
身份證字號
名字
1. 身份證字號有可能是數字、字串
2. 名字可能是字串、Struct、Class、Enum

struct Person<T, U> : CustomStringConvertible {
	var identifier:T	// 型別由外部傳入的第一個順位:T決定
	var name:U	// ...

	// 實作CustomStringConvertible
	var description:String {
		return "\(self.identifier): \(self.name)"
	}
}

// 如果身份證字號和姓名都是字串
let personByString = Person<String, String>(identifier: "124146828", name: "Grady Zhuo")
// 如果身份證字號是整數和姓名是Name的struct
let personByIntName = Person<Int, Name>(identifier: 124146828, name: Name(first: "Max", last: "Chen"))

覺得寫成Person<String, Name>...很麻煩嗎？
1. 如果有建構式可以決定泛型型態，那就可以不用寫這樣的東西
let personByIntName2 = Person(identifier: 124146828, name: Name(first: "John", last: "Yeh", middle: "Boss"))
2. 另外，你也可以透過typealias來幫你自訂型別的名字
typealias StringPerson = Person<String, String>
// 接下來就可以用StringPerson來構建person，而T, U就不用再進行定義
let person = StringPerson(identifier: "L123345678", name: "Hello World")


3.Protocol
嚴格來說不算是標準的Generic寫法，但透過要求protocol實作者完成型別的定義，以達成擬Generic在多型別定義的效果。
protocol Aniaml {
	// 可以透過 typealias Name 要求實作者完成Name的完整定義
	typealias Type
	// 後續就可以使用Type去定義自己需要的參數
	var type: Type {get}
}

struct Cat: Animal {
	typealias Type = AnimalType

	var type: Type {
		var type = AnimalType()
		type.科 =  .貓科
		return type
	}
}
struct Dog: Animal {
	typealias Type = String

	var type: Type {
		return "狗狗"
	}
}

let cat = Cat()
cat.type

let dog = Dog()
dog.type


4.Extension
Extension泛型的類型的時候，可以直接使用其泛型定義的類型。

extension Person {
	// 傳入的name型別是U，因為前面Person就已經宣告好了
	mutating func changeName(name: U) {
		self.name = name
	}
}

// 先產生一個grady
var grady = Person<String, String>(identifier: "123", name: "Grady")
// 因為grady設定的是String，所以可以接受字串的Hello
grady.changeName("Hello")
// 但下面這一句就不行了
let name = Name(first: "Hello", last: "World", middle: nil)
grady.changeName(name)	// 無法接受Name型別的物件
___________________________________________________________________________________________________________________________________________________________________________________________________________________
Optional-操作篇
1. 為什麼要有Optional
2. 怎麼使用Optional
3. 如何操作 ? 和 !
4. 如果遇到一連串Optional的情況，我要不斷解開才能操作嗎？

一、要從nil與crash開始說起
如何防止nil造成的錯誤，各式各樣的檢查早已不可或缺，nil總是在runtime發生，無法在compile time檢查出nil發生問題的可能性，也沒有穩定的規則可以找出nil的出沒之處。

雖然Objective-C有一個有趣的特性，可以在物件成為nil時，執行該物件的method，而不產生錯誤，也不會引發crash。
1. 這只適用於發送訊息(message passing)的時候。
2. 物件是否為nil的狀況不明，如果真的發生nil執行method的情況，開發者也無從得知。
3. 功能與預期行為不符時，會很難發現是甚麼地方造成的。

因此，以安全做為訴求的Swift設計成所有的變數在賦值時只能有值，不能是nil，只要接受到nil，就會拋出錯誤。

二、但變數還是有 nil 的需求，不是嗎？
為了從根本上解決 nil 不明確的問題，Swift導入了Optional的概念，由enum實作，並在Compiler中加強了對Optional的操作性，但其實Optional並非Swift提出的新特性，在C#與新興Design Pattern都看得到。

在其他語言，也可透過Monad Design Pattern 概念(Functional Programming)實作Optional
let intValue:Int = 0		// valid
let intValue2:Int = nil		// invalid
let optionalIntValue:Int? = nil	// valid，這是一個Int的Optional

三、Optional到底是甚麼？(Wrapping)
Optionals say either "there is a value, and it equals x" or "there isn't a value at all".
Optionals are "safer and more expressive than nil pointers in Objective-C".
Optional 在Swift中做為主動描述變數是否存在 nil 值情況判斷的機制，目的是為減少變數在傳遞過程可能存在nil的不確定性，可以立即明確地處理 nil 發生時的情況，並且可在compiler time就檢查對於 nil 的處理是否合法，減少應用程式crash的機會。
Optional的定義宣告(這只取Optional完整宣告的節錄)：
public enum Optional<Wrapped>: _Reflectable, NilLiteralConvertible {
	case None
	case Some(Wrapped)
}

可以發現Optional使用 enum 裡提到的Associated Values的用法，並搭配Generic，並取名泛型型別為Wrapped

裝進一個名為Optional的包裹盒
Associated Values Enum 像是一個容器。而Optional就像包裹。
一般來說，包裹有兩種狀態，並帶一個說明內容物的標籤(type)：
1. 裡面沒放東西
2. 裡面放了一個禮物
如果用Swift語法來說明：
// 產生一個 iPad 2
let 一台iPad2 = iPad(版本: "2", 使用者名字: "Grady Zhuo")
let 禮物包裹: Optional<iPad> = Optional.Some(一台iPad)
let 沒有東西的包裹: Optional<iPad> = Optional.None

// 或是也可以用以下寫法
let 禮物包裹2: Optional<iPad> = Optional(一台iPad2)
let 沒有東西的包裹2: Optional<iPad> = Optional()

使用 ? 來宣告 Optional
? 就是 Optional 的語法糖衣之一，可以在宣告時型別後面加上 ? ，來宣告 Optional ，由上面的例子繼續，可以代換成下面的寫法：
let 一台iPad2 = iPad(版本: "2", 使用者名字: "Grady Zhuo")
let 禮物包裹: iPad? = 一台iPad2
let 沒有東西的包裹:iPad? = nil
? 簡化了宣告、賦值的語法，可以不用寫Optional.Some(...)、Optional(...)或Optional.None、Optional()。
Wrapped、Unwrapped。

Optional Chaining ?.
和Objective-C預設不同，Swift這個nil的處理，是在預料之中的。

//宣告 人 的類別
class 人 {
    //這個人的姓名
    var 姓名:String?
    //這個人禮物收藏盒，也可能是空的
    var 禮物收藏盒:iPad?


    init(姓名:String?){
        self.姓名 = 姓名
    }

    //假如有人送禮物
    func 收禮物(禮物包裏:iPad?){
        // Unwrapping
        if let 禮物 = 禮物包裏 {
            禮物.使用者名字 = self.姓名
            self.禮物收藏盒 = 禮物
        }
    }
}

//產生一個iPad2
let iPad2:iPad? = iPad(版本: "2")
//產生一個人
let grady = 人(姓名:"Grady Zhuo")
//把iPad2送給grady
grady.收禮物(iPad2)

let 使用者名字:String = grady.禮物收藏盒.使用者名字
上面這句會Error，因為禮物收藏盒是Optional、使用者名字也是Optional，Optional不等於內容物的型別，因此無法使用內容物的屬性及方法。
所以使用時要一個Optional一個Optional解開後才可以處理Optional裡面的值。

!
let 使用者名字:String = grady.禮物收藏盒!.使用者名字!

if let
if let 禮物 = grady.禮物收藏盒 {
    if let 使用者名字 = 禮物.使用者名字 {
        print("使用者名字:\(使用者名字)")
    }
}

或是if let 語法特性一次解開兩個Optional
if let 禮物 = grady.禮物收藏盒, let 使用者名字 = 禮物.使用者名字 {
    //禮物和使用者名字都有值，才會進這個 scope
    print("使用者名字:\(使用者名字)")
}

用Nil Coalescing Operator( ?? )
//如果禮物有值的情況，那使用者名字就會出現Grady Zhuo
let 禮物 = grady.禮物收藏盒 ?? iPad(版本: "2")
let 禮物所有人 = 禮物.使用者名字 ?? "" 
print("禮物所有人：\(禮物所有人)") //禮物所有人： Grady Zhuo

//如果沒有禮物，那使用者名字變成"No Owner"
let 禮物2 = 人(姓名: "沒有人").禮物收藏盒 ?? iPad(版本: "n")
let 禮物所有人2 = 禮物2.使用者名字 ?? "No Owner"
print("禮物所有人2：\(禮物所有人2)") //禮物所有人2： No Owner

如何使用Optional Chaining
語法表示：
[object]?.[property]?.[property | method]?.[method]
let 使用者名字:String? = grady.禮物收藏盒?.使用者名字

Optional Chaining 最終所取回的值，也是 Optional
可以想像 Optional Chaining 是在 Optional 裡面去拆包裏，所以就算出現 nil 也還有一層 Optional 包住，所以可以避開 crash 。
if let 使用者名字 = grady.禮物收藏盒?.使用者名字 {
    //自動判斷型別，所以使用者名字會是 String
    //這時就可以直接處理使用者名字的邏輯
}else{
    //如果 禮物收藏盒 或 使用者名字 是nil
    //就會到這個區塊處理
}

有安全的一行文的寫法嗎？
// 用前面的grady，可以很順利的取出禮物上的名字
let 禮物上的名字 = grady.禮物收藏盒?.使用者名字 ?? "No Owner"
print("禮物上的名字:\(禮物上的名字)") //禮物上的名字:Grady Zhuo

//如果 這禮物收藏盒  是 nil
let 禮物上的名字2 = 人(姓名: "").禮物收藏盒?.使用者名字 ?? "No Owner"
print("禮物上的名字2:\(禮物上的名字2)") //禮物上的名字2:No Owner


練習時間 - JSON的拆拆拆時間

由於 Swift 是強型別的語言，因此在型別轉換上必須名確，而 JSON 是一個棘手的東西， JSON 因為無法一開始就確定內容物是什麼型別，會大量使用 AnyObject ，加上 Dictionary 的操作上會因為可能key不存在，因此取得 Optional 的 Value，在使用上比 Objective-C 還不方便。 雖然有高手製作了 SwifyJSON ，不只好用，處理起來也很乾淨，但畢竟是第三方套件，在 Swift 語法還在變更的狀況下，可能都要依賴開發者的更新。 所以自已要透過原生處理的時候，該如何進行呢？
//有一個JSON字串
{
    "address":{
        "country":"Taiwan",
        "city":"Taichung",
    },
    "name":"Grady Zhuo",
    "gift":{
        "name":"iPad",
        "version":2,
    }
}


不同於 C 與多數語言會將 NULL 導向至一個空的記憶體位置，或使用一個數值做為 NULL 的代表，Swift 的 nil 並不存在於真實的記憶體位置，就跟 class 這個詞一樣，只是個保留字。
被包進 Optional 的東西，其實型別就是已不是之前宣告的型別，所以無法進行原型別的操作喔。
e.g.
var i = 0, j= 10
var k = i + j //可以

var a:Int? = 10
var b:Int? = 12
var c = a + b //不可以， Int? 不是 Int 喔


iPad 型別的宣告

// 宣告一個 iPad 的 Struct 以做為內容物的例子
struct iPad {
 //iPad 的 struct
 var 版本:String
 var 使用者名字:String? = nil

 init(版本: String){
     self.版本 = 版本
 }

 init(版本: String,  使用者名字:String?){
     self.版本 = 版本
     self.使用者名字 = 使用者名字
 }
}

交給第三方信託拆禮物，但 Scope 不同 除了 if let 還可以使用 guard let ， guard 跟 if 類似，也是做為條件判斷的保留字，但 guard 是一種強制條件成立的語法，如果條件不成立，必須強制離開作用的 scope 。

另外guard let與 if let 不同的另一點是， Unwrapped Value 的 Scope 也不太一樣
//一般if let的用法
func 一般if的狀況(optionalValue optionalValue: Int?)->String{
    if let unwrappedValue = optionalValue {
        //有值就印出
        // 解開的值會在 if let 的 scrope裡面
        return "\(optionalValue) : unwrappedValue:\(unwrappedValue)"
    }else{
        //如果 optionalValue 為 nil，就直接return
        return "\(optionalValue) : return"
    }
}

一般if的狀況(optionalValue: 123) //Optional(123) : unwrappedValue:\(unwrappedValue)
一般if的狀況(optionalValue: nil) //nil : return


//來看一下guard let 是怎麼用的
func guard的狀況(optionalValue optionalValue: Int?)->String{
    guard let unwrappedValue2 = optionalValue else {
        //與if let不一樣，這個區塊是條件不成立時，會被迫return
        return "\(optionalValue) : 強迫return"
    }
    // 解開的值會在 guard let 的 scrope外面
    return "\(optionalValue) : unwrappedValue2:\(unwrappedValue2)"
}

guard的狀況(optionalValue: 123) //Optional(123) : unwrappedValue2:123
guard的狀況(optionalValue: nil) //nil : 強迫return