（Docker）：Meta 級別、隔離；Virtual Machine：Giga 級別、完全隔離。
下載 docker desktop
到 docker hub (Docker Registry)下載 docker image
docker file 使 APP 封裝成 docker image
docker image 能被創建部署成 docker container 的 static 文件
docker container
docker engine 將 docker container 放在此運行
docker instance 在 docker engine 上產出

docker pull
docker images
docker run
docker run -D(detached)


Multi Stage：優化重要，減少不必要的額外文件
Docker VScode Plugin => Docker
創 docker file
ctrl + shift + p => Add docker file to workspace
選擇: 類型、OS、Port
include optional docker compose file => Yes


From ... As base
workdir
expose
ENV
From ... As build
workdir
Copy 本地文件目錄中 File copy 到 Docker 文件目錄中 File
Run ... "Docker Example"
Copy ...
workdir: "/src/."
Run	// 編譯
From build As publish
Run ... " " -c Release
From base As find
workdir
copy ... from = publish	// 從前階段 image 生成 folder 路徑下找原路徑
EntryPoint [" ", " .dll"]


Cmd
docker build -t myfirstimage:1.0
docker images
docker run <ID>

error 因為 startup.cs 因 SQL Server 尚未配完全
1. 去 Docker Hub 下載數據庫
2. docker-compose.yml
version
	services
		dockcontainername
			image
			build
				context
				dockfile
			ports:8090(外):80(內)	// 解決 port 監聽衝突
		ms-sql-server
			image
			env...
				ACCEPT.EULA
				SA-PASS...
				MSSQL-PID

設定完成後
docker-compose up
docker ps(檢查當前運行，列出 container(2個))

Cmd
docker ps
docker exec -it <ID> bash	// 進入 container 內部)
ls
/opt/mssql-tools/bin/sqlcmd -S localhost -u SA -p <password>	// 進入 DB 內部
select name from sys.databases
go
...
___________________________________________________________________________________________________________________________________________________________________________________________________________________
docker container run ...
　　 ↓
Docker API
　　 ｜
------------------------------------------------------
　　 ｜				|
Docker Engine --- Docker 映像檔快取	|
　　 ｜				|
　　 OS				|
	Compputer		|
------------------------------------------------------
___________________________________________________________________________________________________________________________________________________________________________________________________________________
container 有 name、id
image 也有 name、id，image name 可以用 --tag 設定映像檔名稱


-d, --detach	// 背景啟動容器並顯示容器 id
-e, --env		// 環境變量
-f, --force
-i, --interactive	// 互動模式連接到容器
-t, --tty		// 在容器中連接終端對話視窗
-p, --publish	// 配發實體網路連接阜給容器，Docker 監聽電腦連接阜上的網路流量發送到容器中。預設不會
-a, --all
-q, --quiet
-n, --name		// 幫 container name 命名，而不是使用 Docker 隨機產生的容器 id
-t, --tag		// 設定映像檔名稱

[x,y] > select one

docker version
docker-compose version

docker container rm -f $(docker container ls -aq)
docker image rm -f $(docker image ls -f reference='name'-q)

docker container run [image name, image id]
docker container run --interactive --tty [image name, image id]	// -it
docker container run --detach --publish 8088(host port):80(container port) [image name, image id]
# hostname
# date

docker container ls
docker container ls --all
docker container top [container id]		// login
docker container logs [container id]
docker container inspect [container id]

docker container stats [container id]
docker container rm --force $(docker container ls --all --quiet)

docker image pull [image name]
docker container run -d --name <幫 container name 命名> [image name]
docker container run --env TARGET=google.com [image name]

Dockerfile
FROM
CMD
ENV
WORKDIR
COPY

docker image build --tag <設定映像檔名稱> <建置目錄>
docker image ls 'w*'

docker image history [image name, image id]
docker system df

docker container commit [container name] [設定映像檔名稱]		// 手動建置 Docker Image
___________________________________________________________________________________________________________________________________________________________________________________________________________________
Docker 私服
___________________________________________________________________________________________________________________________________________________________________________________________________________________
Prerequisite
1. Install Docker and Docker Compose
2. Know JDK and Gradle version for your code

1. Clone your project
Clone your project in required directory inside server.
Checkout required branch
Make sure Docker is installed in the system

2. Create Dockerfile
At current working directory, where we cloned our code,

Go inside directory
Create new Dockerfile
Paste below-mentioned code

FROM gradle as dependencies
WORKDIR /app
ADD . .
RUN gradle build
FROM openjdk:13.0.2-jdk-slim
WORKDIR /app
COPY --from=dependencies /app/build/libs/spring-boot-0.0.1-SNAPSHOT.jar app.jar
ENV JAVA_OPTS=""
EXPOSE 8080
ENTRYPOINT exec java $JAVA_OPTS -jar app.jar

1. Mention gradle version as per your project's requirement
2. Add all project files from current directory to Docker container to create a build
If few files are not required to be copied, you can mention them in .dockerignore file
3. RUN gradle command as per your requirement to create Jar file
You can use "gradle clean build" also
4. In previous step, our Jar file got created. Now, Let’s again take jdk image and run this jar file
5. Now, let's copy jar file created from previous step, and copy it to current openjdk container
6. Pass environment variable if required to run this jar file (optional)
7. Expose port number mentioned in your spring boot application. By default it is 8080
8. Finally, paste command to run this jar file

3. Build Dockerfile
docker build -t java-springboot:1 .
where, java-springboot is your image name and 1 is image tag

4. Deploy Docker image
docker run -d --name java-spring --restart always -p 8080:8080 java-springboot:1

5. Automation
使用 shell-script

java-deployment.sh

#!/bin/bash

docker build -t java-springboot:latest . 
docker rm -f java-spring || date
docker run -d --name java-spring --restart always -p 8080:8080 java-springboot:latests

6. Test
curl localhost:8080
curl $Elastic-IP:8080

If you want to share this Docker image with your teammates or colleagues, simply upload it to Docker hub or AWS ECR and share it.