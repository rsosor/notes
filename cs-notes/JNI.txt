visual c++ 6.0 製作 dll，使用 java sdk 1.4 來編譯 java。
HelloWorld.java：
class HelloWorld {
	public native void displayHelloWorld();	// native 通知 Java 這個函數會使用到外部函數

	static {
		System.loadLibrary("hello");	// 我要載入 hello.dll 的動態連結
	}

	public static void main(String[] args) {
		new HelloWorld().displayHelloWorld();
	}
}
將這個程式存檔為"HelloWorld.java"，先用 javac HelloWorld.java，然後使用 javah HelloWorld 產生 HelloWorld.h，在 HelloWorld.h 中我們知道我們要實作一個函數 Java_HelloWorld_displayHelloWorld(JNIEnv *, jobject);
接下來介紹如何完成這個函數。
在 windows、linux 下有一種叫 dll，動態連結的機制。
首先啟動 visual c++ 6.0，在檔案中選擇新增，然後在project中選擇Win32 Dynamic-Link Library這個選項，然後填寫你專案的名稱'hello'，按下'ok'，選擇 An empty Dll project 這一個選項，然後 Finish 再按 ok，然後將要從頭開始。

就會得到一個空的專案資料，需要增加一些程式到我們的專案，在這之前我們先處理好我們的 .h 檔，首先先到你安裝 java JDK 的目錄下找到 include 的資料夾，為了以後撰寫程式方便，將這個目錄下所有檔案複製一份到你
安裝 visual c++ 6.0 目錄下 VC98/Include 裡面，預設路徑為 C:/Program Files/Microsoft Visual Studio/VC98/Include，並將原本放在 win32 中的 jawt_md.h 和 jni_md.h 複製一份到 C:/Program Files/Microsoft Visual Studio/VC98/Include。

再來將剛產生的 HelloWorld.h 加入我們的 Header Files 中，並新增一個 .c 的檔案 HelloWorldImp.c，然後到上方的功能表中 Build 選擇 Build hello.dll，將會得到一個 hello.dll 在專案目錄下的 /Debug/hello.dll。

HelloWorldImp.c：
#include
#include "HelloWorld.h"
#include

JNIEXPORT void JNICALL
Java_HelloWorld_displayHelloWorld(JNIEnv *env, jobject obj)
{
	printf("HelloWorld");
	return;
}

HelloWorld.h：
/* Do not edit this file - it is machine generated */ #include
/* Header for class HelloWorld */
#ifndef _Included_HelloWorld
#define _Included_HelloWorld
#ifdef __cplusplus extern "C" { #endif
/*
 * Class: HelloWorld
 * Method: displayHelloWorld
 * Signature: ()V
*/
JNIEXPORT void JNICALL Java HelloWorld displayHelloWorld(JNIEnv *, jobject);
#ifdef __cplusplus } #endif
#endif

然後將 hello.dll 和 HelloWorld.class 放在同一個目錄下，執行 java HelloWorld！
c 語言實作 dll，java 實作 jpython。jpython 是以 Java 實作的一個 python 語言，這個語言保有和 python 語言相同的簡單與便利的特性，只不過它是架設在 Java 的虛擬機器之上，所以許多有關作業系統方便處理的函數都無法使用
jpython 的語法就是 python 語言，對於熟悉 python 的人應該很容易上手，比較特別的是它能夠將 java 所撰寫而成的 *.class import 到自己的函式庫中做使用，它不但可以使用原本在 python 中所存在的函式庫，更可以取用 Java 的函式庫，而透過 java 我們又可以和 c 語言溝通，我們也可以和 prolog 語言溝通。

以前是在同一種語言中做包裝，在C、java中使用物件導向的程式設計，包成許許多多的類別，現在我發現一件事，我們似乎可以對語言做包裝，函數並不一定同一種語言去實作，因為每個人的背景不同，習慣熟悉使用的語言不同，在專案開發中強迫每個成員使用同一種語言或許比較容易整合，但開發速度不一定快，只有在每一個人使用它所習慣的語言來開發才能達到事半功倍的效果。

(Java的JNI與c接軌的方式我在之前的文章中已經做了詳細的介紹，在此不重複)

環境設定
在 c:/jython21下建一個目錄叫 JavaLib(名字隨便取)，然後將 hello.dll 和 HelloWorld.class 複製到此目錄下，然後設定你的環境變數，Path 和 CLASSPATH 都增加 c:/jython21/JavaLib
測試執行
>>> import HelloWorld ←左邊這一句話是將HelloWorld.class類別引入使用
成功之後應該會出現>>>提示訊息，等候你輸入下一個指令，如果不成功請檢查一下HelloWorld.java內容是否正確，記得此類別必須為一個公開類別 public class HelloWorld{...}，修正完畢重新產生HelloWorld.class
>>> test=HelloWorld() ←左邊這一句話相當於test=new HelloWorld();
接著應該會出現>>>提示訊息
>>> test.displayHelloWorld()
>>>HelloWorld
如果出現HelloWorld代表成功了

根據專家指出利用 java 搭配 jython 來開發你的專案可以使開發的速度大大提升，因為 jython 的語法簡單，用短短的描述即可達成很多工作，最後更神奇的好像在jython中可以將它本身結合java的程式碼組譯成新的.class檔提供java vm使用，他本身也提供.jar檔讓你能夠直接在Java中享用jython的便利