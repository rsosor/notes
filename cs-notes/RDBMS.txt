不同的編程環境使用的 SQL 變種各不相同。T-SQL、PL/SQL、MySQL、PostgreSQL 提供強大編程支持，Access SQL、SQLite 對高級編程支持有限，需結合其他工具實現對數據的複雜操作。
MS SQL Server	> T-SQL 	語法：	標準 SQL 用 FETCH FIRST 選擇前面特定數量的行，這裡用 TOP 關鍵字。SELECT TOP 20 * FROM table_name。支持變量、循環、函數、過程、錯誤處理
Oracle		> PL/SQL 語法：	支持變量、循環、函數、過程、錯誤處理
MySQL		> MySQL 	語法：	選擇前面特定數量的行使用 Limit。SELECT * FROM table_name LIMIT 10。支持變量、循環、函數、過程、錯誤處理
PostgreSQL	> PostgreSQL語法：支持變量、循環、函數、過程、錯誤處理

Access		> Access SQL語法：和 T-SQL 一樣和標準 SQL 有 FETCH FIRST 和 TOP 的差別，Access 的 Wildcard 和標準 SQL 不同。表示多個字符標準 SQL 使用 %，Access 使用 *。複雜的查詢需借助 VBA
SQLite		> SQLite 語法：	輕巧，和 Python 無縫銜接，本身不支持變量、過程、函數。Python + SQLite + Excel = Access ?


資料存在硬碟中持久化，內存從硬碟讀取資料 CPU 才能做邏輯運算，資料庫是由硬體與軟體共同組成。

資料庫		儲存資料
資料庫管理系統	管理資料庫的軟體
資料庫應用程式	加強資料庫系統的處理能力的管理資料庫的軟體補充

（SQL - Structured Query Language）
三個主要的標準，ANSI(美國國家標準機構) SQL、SQL-92(SQL 2)、SQL-99

以下取自維基百科(wikipedia)
Structured Query Language 結構化查詢語言是一種特定目的程式語言，用於管理關聯式資料庫管理系統（RDBMS），或在關係流資料管理系統（RDSMS）中進行流處理。
SQL 基於「關係代數」和「元組關係演算」，包括一個資料定義語言(DDL)和資料操縱語言(DML)。SQL 的範圍包括資料插入、查詢、更新和刪除，資料庫模式建立和修改，以及資料存取控制。儘管 SQL 經常被描述為，而且很大程度上是一種聲明式編程（4GL），但是其也含有程序式編程的元素。

SQL是進階的非過程化編程語言，它允許使用者在高層資料結構上工作。它不要求使用者指定對資料的存放方法，也不需要使用者了解其具體的資料存放方式。而它的介面，能使具有底層結構完全不同的資料庫系統和不同資料庫之間，使用相同的SQL作為資料的輸入與管理。它以記錄專案〔records〕的合集（set）〔項集，record set〕作為操縱物件，所有SQL語句接受項集作為輸入，回送出的項集作為輸出，這種項集特性允許一條SQL語句的輸出作為另一條SQL語句的輸入，所以SQL語句可以巢狀，這使它擁有極大的靈活性和強大的功能。在多數情況下，在其他程式語言中需要用一大段程式才可實踐的一個單獨事件，而其在SQL上只需要一個語句就可以被表達出來。這也意味著用SQL可以寫出非常複雜的語句，在不特別考慮效能下。

SQL同時也是資料庫檔案格式的副檔名。

SQL包含四個部分：
資料定義語言（Data Definition Language, DDL）		DROP、CREATE、ALTER 等
資料操縱語言（Data Manipulation Language, DML）	INSERT、UPDATE、DELETE
資料控制語言（Data Control Language, DCL）		SELECT
事務控制語言（Transaction Control Language, TCL）	GRANT、REVOKE、COMMIT、ROLLBACK 等

增刪改查
CRUD：	create	delete	update	read
SQL：	insert	delete	update	select

where(select、update、delete)、not, and, or、is null、is not null、order by ASC | DESC、inner join . on、left join、right join、full join、like
select . from .
select distinct . from .
select count(distinct .) from .
select count(distinct .) as . from (select distinct . from .)

insert into table_name (column1, column2, ...) values (value1, value2, ...)
insert into table_name values (value1, value2, ...)
insert into table_name (column1, column3) values (value1, value3)

update table_name set column1 = value1, column2 = value2, ... where condition
update Customers set ContactName = 'Alfred Schmidt', City = 'Frankfurt' where CustomerID = 1;
update Customers set ContactName = 'Juan';
// Be careful when updating records. If you omit the WHERE clause, ALL records will be updated!

delete from . where condition
delete from Customers where CustomerName = 'Alfreds Futterkiste';
delete from Customers;
// It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact:

SQL TOP, LIMIT, FETCH FIRST or ROWNUM Clause (指定要返回的紀錄數)
// Not all database systems support the SELECT TOP clause. MySQL supports the LIMIT clause to select a limited number of records, while Oracle uses FETCH FIRST n ROWS ONLY and ROWNUM(older oracle syntax).

SQL Server / MS Access Syntax:
select top number|percent column_name(s) from table_name where condition;

MySQL Syntax:
select column_name(s) from table_name where condition limit number

Oracle 12 Syntax:
select column_name(s) from table_name order by column_name(s) fetch first number rows only


Functions：
min(column_name)、max(column_name)、count(column_name)、avg(column_name)、sum(column_name)

___________________________________________________________________________________________________________________________________________________________________________________________________________________
JDBC 連接 mysql 數據庫有 4 種 url 寫法：

localhost
jdbc:mysql://localhost:3306/數據庫名

127.0.0.1
jdbc:mysql://127.0.0.1:3306/數據庫名

mysql 不支持以下兩種是因為默認只接收本地訪問，要給 mysql 授予遠程訪問的權限。
使用計算名
在數據庫中運行：GRANT ALL PRIVILEGES ON *.* TO '帳號'@'%' IDENTIFIED BY '密碼';
jdbc:mysql://LAPTOP-8MP85G2C:3306/數據庫名

使用本機 ip 地址
本機 ip 地址和127.0.0.1不同，這是實實在在綁定在你的網卡上的 ip 地址，而127.0.0.1只是一個保留 ip，如果電腦上沒有網卡一樣能用127.0.0.1。
jdbc:mysql://ip:3306/數據庫名


如果要手動加載驅動 (https://zhuanlan.zhihu.com/p/47097818) (Spring Boot 是直接在 application.properties 裡設定)：
先去下載 JDBC 驅動包，放到 lib 文件夾後 builder path 編譯路徑，導入成功！
JDBC 連接 MySQL：
1. 加載驅動，將這份字節碼加載進 JVM。當字節碼被加載到 JVM ，會執行字節碼中的靜態代碼塊
public class ConnectionClass {
	public static void main(String[] args) throws Exception {
		Class.forName("com.mysql.cj.jdbc.Driver");	// 第一次寫這段代碼會報異常，雙擊直接拋出。
	}
}
使用 CTRL + SHIFT + T，彈出 Open Type 對話框，輸入Driver點擊進去，沒有查看到源文件，因為我們並沒有添加進來，Java 包是我們手動添加的，但是源文件還沒有手動添加。
點 Attach Source，選擇 External File...，找到當時下載的壓縮文件 mysql-connector-java-"version".zip。
現在可以看到源碼了，靜態代碼塊幫你 new Driver()。
package com.mysql.cj.jdbc;
import java.sql.SQLException;

public class Drvier extends NonRegisteringDriver implements java.sql.Driver {
	static {
		try {
			java.sql.DriverManager.registerDriver(new Driver());
		} catch (SQLException E) {
			throw new RuntimeException("Can't register drvier!");
		}
但是他還沒有連接到數據庫 MySQL。2. 獲取連接對象
		String url = "jdbc:mysql://localhost:3306/jdbcdemo";
		String user = "root";
		String password="123456";
		Connection conn = DriverManager.getConnection(url, user, password);
		System.out.println(conn);	// 能打印代表連接數據庫成功
		// Thread.sleep(50000);	// 重新運行 Java 再運行 navicat (圖形化資料庫管理及發展軟體)的查詢語句 SHOW PROCESSLIST; 就顯示出來了。
	}
}


mysql 中 grant all privileges on 給用戶遠程權限

改表
當你帳號不允許從遠程登錄，只能在 localhost 連接時。只要在 mysql 伺服器上，更改 mysql 數據庫裡的 user 表的 host，localhost 改成 % 代表都可連接，或是改成指定 IP 。

1. mysql -u root -p  

2. select host,user from user where user='root';

3. update user set host = '%' where user='root' and host='localhost';  

4. select host, user from user where user='root';

授權
[root@aaa-server ~]# mysql -u root -p
MariaDB [(none)]> grant all privileges on *.* to 'root'@'%' identified by 'root密碼' with grant option;
Query OK, 0 rows affected (0.00 sec)

MariaDB [(none)]> flush privileges;
Query OK, 0 rows affected (0.01 sec)

MariaDB [(none)]> exit
Bye


授權
想 user 使用 mypwd 從任何主機連接到 mysql 伺服器的話

grant all privileges on *.* to 'user'@'%' identified by 'mypwd' with grant option;  

flush privileges;


模板
grant all privileges on 庫.表 to '用戶' @ 'IP' identified by '密碼' with grant option;

flush privileges;

修改完訪問權限，還需要配置阿里雲的安全組規則。
登錄阿里云控制台，網路與安全—>安全組—>配置規則—>添加安全組規則，開放 MySQL 的 3306 端口。

打開本地的 MySQL Workbench 新建阿里雲 MySQL 連接(把原本的 localhost 修改為阿里雲的公有 ip)。就能打開阿里雲 MySQL 了。

到工程把 application.properties 和 Database 中的 localhost 修改為阿里雲的公網 ip 重新運行，就能打包。
最後在 IDEA 的 Terminal 窗口中使用 mvn clean package。然後把 xxx-xx-SNAPSHOT.jar 複製到阿里雲的伺服器上，打開 shell 運行 java -jar xxx-xx-SNAPSHOT.jar

1、Could not create connection to database server。
是因為 MySQL 的版本與工程中使用的版本不一致。可修改 pom.xml 中 mysql 的版本

2、運行時出現 org.springframework.orm.jpa.JpaSystemException: could not execute statement; nested exception is org.hibernate.exception.GenericJDBCException: could not execute statement
數據表的主鍵沒有設置，可以把其設置為自增___________________________________________________________________________________________________________________________________________________________________________________________________________________
（萬用字元 SQL Wildcards）
%			// 代替「零個」至「多個」字元
_			// 代替「一個」字元
[charlist]			// 代替「一個」在列舉範圍內的字元
[^charlist] 或 [!charlist]	// 代替「一個」不在列舉範圍內的字元

模式(pattern)
abc%	所有以 abc 開頭的字串。如 abc、abcx 或 abcxxx 等字串。
%abc%	所有包含 abc 的字串。如 abc、xxabcy 或 abcxxxx 等字串。
a_	以 a 為開頭的兩個字。如 ab、ac 或 ad 等字串皆符合此模式，但 a 不符合，因為此模式限定 a 之後一定要接任一字元。
a[bcd]	以 a 為開頭其後接著 b 或 c 或 d 其中一個字元。如 ab、ac 或 ad 等字串，但 ae 不符合。
a[^bcd]	以 a 為開頭其後接著非 b 或 c 或 d 的任何一個字元。如 ax、ay 或 az 等字串，但 ab 不符合。

SELECT * FROM customers WHERE Address LIKE '新北%';

在標準 SQL 中，字符串使用的是單引號。如果字符串本身包括單引號，則使用兩個單引號。但在其他數據庫可能有對 SQL 的擴展，比如 MySQL 中允許使用單引號和雙引號。
如果 SQL 伺服器模式啟用了 ANSI_QUOTES，只能用單引號引用字符串。用雙引號引用的字符串被解釋為一個識別符(類似反引號)。
___________________________________________________________________________________________________________________________________________________________________________________________________________________
插入多筆記錄時，使用單筆 INSERT 敘述的方式比較快。
insert into table_name (column_list) values (value_list), (value_list2)

1.系統OO化.別人都用正規化.正規化我不會,我習慣用物件導向方式
2.小系統用Int,流水號,不要用字串,int 是電腦處理基礎單位,所以排序,索引..最快
3.分散式DB用GUID 全世界每一個資料拋過來都不會沖到,而且是Client 端,App端產生
4.PK給App 給 DB 關聯看,所以只要不重複,容易電腦計算,如果給Users識別用,我會再用一組有規律的Key讓Users記
___________________________________________________________________________________________________________________________________________________________________________________________________________________
use mysql; 
 
update user set authentication_string='' where user='root';	// 看是否為空
 
ALTER user 'root'@'localhost' IDENTIFIED BY 'root';	// 修改密碼為 root
___________________________________________________________________________________________________________________________________________________________________________________________________________________
（進階）

（MySQL 伺服器端工具程式）

mysqld：SQL 後台程式(MySQL 伺服器處理程序)。必須在該程式執行之後，用戶端才能透過連接伺服器來存取資料庫

mysqld_safe：伺服器啟動指令搞。在 UNIX 和 NetWare 中推薦使用 mysqld_safe 來啟動 mysqld 伺服器。增加了一些安全特性，例如當錯誤時重新啟動伺服器並向錯誤記錄檔寫入執行時間資訊。

mysql.server：伺服器啟動指令搞。該指令搞用於使用包含為特定等級的、執行啟動服務的指令搞的、執行目錄的系統。它呼叫 mysqld_safe 來啟動 MySQL 伺服器。

mysql_multi：伺服器啟動指令搞。可以啟動或停止系統上安裝的多個伺服器。

myisamchk：描述、檢查、最佳化、維護 MyISAM 表的工具程式。

mysqlbug：MySQL 缺陷報告指令搞。它可以用來向 MySQL 郵件系統發送缺陷報告。

mysql_install_db：該指令搞用預設許可權建立 MySQL 授權表。通常只是在系統上第一次安裝 MySQL 時執行一次。

（MySQL 用戶端工具程式）

myisampack：壓縮 MyISAM 表，以產生更小的唯讀表的工具。

mysql：互動式輸入 SQL 敘述或從檔案以批次處理模式執行它們的命令列工具

mysqlaccess：檢查存取主機名稱、使用者名稱、資料庫群組合的許可權的指令搞。

mysqladmin：執行管理操作的客戶程式，例如建立或刪除資料庫、多載授權表、將表更新到硬碟上、重新開啟記錄檔。mysqladmin 還可以用來檢索版本、處理程序、伺服器的狀態資訊。

mysqlbinlog：從二進位記錄檔讀取敘述的工具。在二進位記錄檔中包含執行過的敘述，可用來說明系統從當機中恢復。

mysqlcheck：檢查、修復、分析、最佳化表的表維護客戶程式。

mysqldump：將 MySQL 資料庫轉儲到一個檔案(例如 SQL 敘述或 tab 分隔符號文字檔)的客戶程式。

mysqlhotcopy：當伺服器在執行時期，快速備份 MyISAM 或 ISAM 表的工具。

mysqlimport：使用 LOAD DATA INFILE 將文字檔匯入相關表的客戶程式。

mysqlshow：顯示資料庫、表、列、索引相關資訊的客戶程式。

perror：顯示系統或 MySQL 錯誤程式含義的工具。

（MySQL 8.0 特性）

資料字典：
最小資料定義敘述：
安全和帳戶管理：
資源管理：
InnoDB 增強功能：
字元集支援：
增強 JSON 功能：
資料類型的支援：
查詢的最佳化：
公用表運算式：
視窗函數：
統計長條圖：
備份鎖：

通用表運算式 CTE(Common Table Expressions)，是命名的臨時結果集，作用範圍是目前敘述，CTE 可以了解成可重複使用的子查詢，CTE 可以參考其他 CTE，但子查詢不能參考其他子查詢。
with_clauses:
	WITH [RECURSIVE]
		cte_name [(col_name [, col_name] ... )] AS (subquery)
		[, cte_name [(col_name [, col_name] ...)] AS (subquery)] ...



delimiter //
使用預存程式怕跟子句的 ; 衝突
delimiter ;

（索引）


（預存程序和函數）
	變數
	定義條件、處理常式
create table test_db.t (s1 int, primary key (s1));

DELIMITER //

create procedure handlerdemo ()
BEGIN
DECLARE CONTINUE HANDLER FOR SQLSTATE '23000' SET @x2 = 1;
SET @x = 1;
INSERT INTO test_db.t VALUES (1);
SET @x = 2;
INSERT INTO test_db.t VALUES (1);
SET @x = 3;
END;
//

DELIMITER ;

/* 呼叫 SP(stored procedure) */
CALL handlerdemo();

/* 檢視呼叫過程結果 */
select @x;
+-----+
|  @x |
+-----+
 |  3   |
+-----+
	游標（宣告、開啟、使用、關閉）
DECLARE cursor_name CURSOR FOR select_statement
OPEN cursor_name{游標名稱}
FETCH cursor_name INTO var_name [, var_name] ...{參數名稱}
CLOSE cursor_name{游標名稱}
	流程控制（IF、CASE、LOOP、LEAVE、ITERATE、REPEAT、WHILE）
IF expr_condition THEN statement_list
	[ELSEIF expr_condition THEN statement_list] ...
	[ELSE statement_list]
END IF



	呼叫、檢視、修改、刪除預存程序和函數
（視圖）

（MySQL 觸發器）

（MySQL 許可權與安全管理）

（資料備份與恢復）

（MySQL 記錄檔）

（效能最佳化）

（MySQL Replication）

（MySQL Workbench）

（MySQL Shell 管理） Some features of Utilities are on the roadmap for shell, users are encouraged to migrate to MySQL Shell.）

（MySQL Router 讀寫分離）Proxy is not GA, recommend MySQL Router for production use.）

（MySQL 存儲引擎）

MyISAM	堆表

InnoDB	聚集
一行紀錄可以不同格式存在 InnoDB，Compact、Redundant、Dynamic、Compressed 行格式


每行最大字節 65535(包含格式訊息)
每頁最大字節 16384(可以調整)
----------------------------------------------------------------
作業系統處理頁是 4 KB
Linux 同時支援正常大小的記憶體頁和大記憶體頁(Huge Page)，絕大多數處理器上的記憶體頁的預設大小都是 4KB，雖然部分處理器會使用 8KB、16KB 或者 64KB 作為預設的頁面大小，但是 4KB 的頁面仍然是作業系統預設記憶體頁配置的主流；除了正常的記憶體頁大小之外，不同的處理器上也包含不同大小的大頁面，我們在 x86 處理器上就可以使用 2MB 的記憶體頁。

過小的頁面大小會帶來較大的頁表項增加定址時 TLB（Translation lookaside buffer）的查詢速度和額外開銷；
過大的頁面大小會浪費記憶體空間，造成記憶體碎片，降低記憶體的利用率

頁表項
我們在 為什麼 Linux 需要虛擬記憶體 一文中曾經介紹過 Linux 中的虛擬記憶體，每個程式能夠看到的都是獨立的虛擬記憶體空間，虛擬記憶體空間只是邏輯上的概念，程式仍然需要訪問虛擬記憶體對應的實體記憶體，從虛擬記憶體到實體記憶體的轉換就需要使用每個程式持有頁表。
為了儲存 64 位作業系統中 128 TiB 虛擬記憶體的對映資料，Linux 在 2.6.10 中引入了四層的頁表輔助虛擬地址的轉換，在 4.11 中引入了五層的頁表結構，在未來還可能會引入更多層的頁表結構以支援 64 位的虛擬地址。
四層頁表結構中，作業系統用最低的 12 位為頁面偏移量，剩下 36 位會分四組分別表示當前層級在上一層中的索引，所有的虛擬地址都可以用上述的多層頁表查詢到對應的實體地址。
因作業系統的虛擬地址空間大小都是一定的，整片虛擬地址空間被均勻分成 N 個大小相同的記憶體頁，所以記憶體頁大小最終決定每個程式中頁表項的層級結構和具體數量，虛擬頁大小越小，單個程式頁表項和虛擬頁就越多。
因為目前的虛擬頁大小為 4096 位元組，所以虛擬地址末尾的 12 位可以表示虛擬頁中的地址，如果虛擬頁的大小降到了 512 位元組，那麼原本的四層頁表結構或者五層頁表結構會變成五層或者六層，這不僅會增加記憶體訪問的額外開銷，還會增加每個程式中頁表項佔用的記憶體大小。
碎片化
因為記憶體對映裝置會在記憶體頁的層面工作，所以作業系統認為記憶體分配的最小單元就是虛擬頁。哪怕使用者程式只是申請了 1 位元組的記憶體，作業系統也會為它申請一個虛擬頁，如果記憶體頁的大小為 24KB，那麼申請 1 位元組的記憶體會浪費 ~99.9939% 的空間。記憶體的價格大幅降低的今天，碎片化的記憶體不再是需要解決的關鍵問題了。
除了記憶體的利用率之外，較大的記憶體頁也會增加記憶體拷貝時的額外開銷，因為 Linux 上的寫時拷貝機制，在多個程式共享同一塊記憶體時，當其中的一個程式修改了共享的虛擬記憶體會觸發記憶體頁的拷貝，這時作業系統的記憶體頁越小，寫時拷貝帶來的額外開銷也就越小。
----------------------------------------------------------------



File Header		文件頭部			38 字節		頁的一些通用訊息
Page Header		頁面頭部			56 字節		數據頁專有的一些訊息
Infimum + Supremum Records	最小紀錄和最大紀錄	26 字節		兩個虛擬的行紀錄
User Record		用戶紀錄	  		  ?		實際存儲的行紀錄內容
Free Space		空閒空間	  		  ?		頁中尚未使用的空間
Page Directory		頁面目錄	  		  ?		頁中某些紀錄的相對位置
File Trailer		文件尾部	  		  8 字節		校驗頁是否完整




___________________________________________________________________________________________________________________________________________________________________________________________________________________
